### YamlMime:ManagedReference
items:
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder"
  id: "Builder"
  parent: "com.google.datastore.v1.client"
  children:
  - "com.google.datastore.v1.client.DatastoreOptions.Builder.Builder()"
  - "com.google.datastore.v1.client.DatastoreOptions.Builder.Builder(com.google.datastore.v1.client.DatastoreOptions)"
  - "com.google.datastore.v1.client.DatastoreOptions.Builder.build()"
  - "com.google.datastore.v1.client.DatastoreOptions.Builder.credential(com.google.api.client.auth.oauth2.Credential)"
  - "com.google.datastore.v1.client.DatastoreOptions.Builder.databaseId(java.lang.String)"
  - "com.google.datastore.v1.client.DatastoreOptions.Builder.host(java.lang.String)"
  - "com.google.datastore.v1.client.DatastoreOptions.Builder.initializer(com.google.api.client.http.HttpRequestInitializer)"
  - "com.google.datastore.v1.client.DatastoreOptions.Builder.localHost(java.lang.String)"
  - "com.google.datastore.v1.client.DatastoreOptions.Builder.projectEndpoint(java.lang.String)"
  - "com.google.datastore.v1.client.DatastoreOptions.Builder.projectId(java.lang.String)"
  - "com.google.datastore.v1.client.DatastoreOptions.Builder.transport(com.google.api.client.http.HttpTransport)"
  langs:
  - "java"
  name: "DatastoreOptions.Builder"
  nameWithType: "DatastoreOptions.Builder"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder"
  type: "Class"
  package: "com.google.datastore.v1.client"
  summary: "Builder for <xref uid=\"com.google.datastore.v1.client.DatastoreOptions\" data-throw-if-not-resolved=\"false\">DatastoreOptions</xref>."
  syntax:
    content: "public static class DatastoreOptions.Builder"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.Builder()"
  id: "Builder()"
  parent: "com.google.datastore.v1.client.DatastoreOptions.Builder"
  langs:
  - "java"
  name: "Builder()"
  nameWithType: "DatastoreOptions.Builder.Builder()"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.Builder()"
  overload: "com.google.datastore.v1.client.DatastoreOptions.Builder.Builder*"
  type: "Constructor"
  package: "com.google.datastore.v1.client"
  syntax:
    content: "public Builder()"
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.Builder(com.google.datastore.v1.client.DatastoreOptions)"
  id: "Builder(com.google.datastore.v1.client.DatastoreOptions)"
  parent: "com.google.datastore.v1.client.DatastoreOptions.Builder"
  langs:
  - "java"
  name: "Builder(DatastoreOptions options)"
  nameWithType: "DatastoreOptions.Builder.Builder(DatastoreOptions options)"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.Builder(DatastoreOptions options)"
  overload: "com.google.datastore.v1.client.DatastoreOptions.Builder.Builder*"
  type: "Constructor"
  package: "com.google.datastore.v1.client"
  syntax:
    content: "public Builder(DatastoreOptions options)"
    parameters:
    - id: "options"
      type: "com.google.datastore.v1.client.DatastoreOptions"
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.build()"
  id: "build()"
  parent: "com.google.datastore.v1.client.DatastoreOptions.Builder"
  langs:
  - "java"
  name: "build()"
  nameWithType: "DatastoreOptions.Builder.build()"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.build()"
  overload: "com.google.datastore.v1.client.DatastoreOptions.Builder.build*"
  type: "Method"
  package: "com.google.datastore.v1.client"
  syntax:
    content: "public DatastoreOptions build()"
    return:
      type: "com.google.datastore.v1.client.DatastoreOptions"
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.credential(com.google.api.client.auth.oauth2.Credential)"
  id: "credential(com.google.api.client.auth.oauth2.Credential)"
  parent: "com.google.datastore.v1.client.DatastoreOptions.Builder"
  langs:
  - "java"
  name: "credential(Credential credential)"
  nameWithType: "DatastoreOptions.Builder.credential(Credential credential)"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.credential(Credential credential)"
  overload: "com.google.datastore.v1.client.DatastoreOptions.Builder.credential*"
  type: "Method"
  package: "com.google.datastore.v1.client"
  summary: "Sets the Google APIs <xref uid=\"com.google.api.client.auth.oauth2.Credential\" data-throw-if-not-resolved=\"false\">Credential</xref> used to access Cloud Datastore."
  syntax:
    content: "public DatastoreOptions.Builder credential(Credential credential)"
    parameters:
    - id: "credential"
      type: "com.google.api.client.auth.oauth2.Credential"
    return:
      type: "com.google.datastore.v1.client.DatastoreOptions.Builder"
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.databaseId(java.lang.String)"
  id: "databaseId(java.lang.String)"
  parent: "com.google.datastore.v1.client.DatastoreOptions.Builder"
  langs:
  - "java"
  name: "databaseId(String databaseId)"
  nameWithType: "DatastoreOptions.Builder.databaseId(String databaseId)"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.databaseId(String databaseId)"
  overload: "com.google.datastore.v1.client.DatastoreOptions.Builder.databaseId*"
  type: "Method"
  package: "com.google.datastore.v1.client"
  summary: "Sets the database ID used to access Cloud Datastore."
  syntax:
    content: "public DatastoreOptions.Builder databaseId(String databaseId)"
    parameters:
    - id: "databaseId"
      type: "java.lang.String"
    return:
      type: "com.google.datastore.v1.client.DatastoreOptions.Builder"
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.host(java.lang.String)"
  id: "host(java.lang.String)"
  parent: "com.google.datastore.v1.client.DatastoreOptions.Builder"
  langs:
  - "java"
  name: "host(String host)"
  nameWithType: "DatastoreOptions.Builder.host(String host)"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.host(String host)"
  overload: "com.google.datastore.v1.client.DatastoreOptions.Builder.host*"
  type: "Method"
  package: "com.google.datastore.v1.client"
  summary: "Sets the host used to access Cloud Datastore. To connect to the Cloud Datastore Emulator, use\n <xref uid=\"com.google.datastore.v1.client.DatastoreOptions.Builder.localHost*\" data-throw-if-not-resolved=\"false\">#localHost</xref> instead."
  syntax:
    content: "public DatastoreOptions.Builder host(String host)"
    parameters:
    - id: "host"
      type: "java.lang.String"
    return:
      type: "com.google.datastore.v1.client.DatastoreOptions.Builder"
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.initializer(com.google.api.client.http.HttpRequestInitializer)"
  id: "initializer(com.google.api.client.http.HttpRequestInitializer)"
  parent: "com.google.datastore.v1.client.DatastoreOptions.Builder"
  langs:
  - "java"
  name: "initializer(HttpRequestInitializer initializer)"
  nameWithType: "DatastoreOptions.Builder.initializer(HttpRequestInitializer initializer)"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.initializer(HttpRequestInitializer initializer)"
  overload: "com.google.datastore.v1.client.DatastoreOptions.Builder.initializer*"
  type: "Method"
  package: "com.google.datastore.v1.client"
  summary: "Sets the (optional) initializer to run on HTTP requests to Cloud Datastore."
  syntax:
    content: "public DatastoreOptions.Builder initializer(HttpRequestInitializer initializer)"
    parameters:
    - id: "initializer"
      type: "com.google.api.client.http.HttpRequestInitializer"
    return:
      type: "com.google.datastore.v1.client.DatastoreOptions.Builder"
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.localHost(java.lang.String)"
  id: "localHost(java.lang.String)"
  parent: "com.google.datastore.v1.client.DatastoreOptions.Builder"
  langs:
  - "java"
  name: "localHost(String localHost)"
  nameWithType: "DatastoreOptions.Builder.localHost(String localHost)"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.localHost(String localHost)"
  overload: "com.google.datastore.v1.client.DatastoreOptions.Builder.localHost*"
  type: "Method"
  package: "com.google.datastore.v1.client"
  summary: "Configures the client to access Cloud Datastore on a local host (typically a Cloud Datastore\n Emulator instance). Call this method also configures the client not to attach credentials to\n requests."
  syntax:
    content: "public DatastoreOptions.Builder localHost(String localHost)"
    parameters:
    - id: "localHost"
      type: "java.lang.String"
    return:
      type: "com.google.datastore.v1.client.DatastoreOptions.Builder"
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.projectEndpoint(java.lang.String)"
  id: "projectEndpoint(java.lang.String)"
  parent: "com.google.datastore.v1.client.DatastoreOptions.Builder"
  langs:
  - "java"
  name: "projectEndpoint(String projectEndpoint)"
  nameWithType: "DatastoreOptions.Builder.projectEndpoint(String projectEndpoint)"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.projectEndpoint(String projectEndpoint)"
  overload: "com.google.datastore.v1.client.DatastoreOptions.Builder.projectEndpoint*"
  type: "Method"
  package: "com.google.datastore.v1.client"
  summary: "\n<strong>Deprecated.</strong> <em>Use <xref uid=\"com.google.datastore.v1.client.DatastoreOptions.Builder.projectId*\" data-throw-if-not-resolved=\"false\">#projectId</xref> and/or <xref uid=\"com.google.datastore.v1.client.DatastoreOptions.Builder.host*\" data-throw-if-not-resolved=\"false\">#host</xref>/<xref uid=\"com.google.datastore.v1.client.DatastoreOptions.Builder.localHost*\" data-throw-if-not-resolved=\"false\">#localHost</xref> instead.</em>\n\nSets the project endpoint used to access Cloud Datastore. Prefer using <xref uid=\"com.google.datastore.v1.client.DatastoreOptions.Builder.projectId*\" data-throw-if-not-resolved=\"false\">#projectId</xref>\n and/or <xref uid=\"com.google.datastore.v1.client.DatastoreOptions.Builder.host*\" data-throw-if-not-resolved=\"false\">#host</xref>/<xref uid=\"com.google.datastore.v1.client.DatastoreOptions.Builder.localHost*\" data-throw-if-not-resolved=\"false\">#localHost</xref> when possible."
  syntax:
    content: "public DatastoreOptions.Builder projectEndpoint(String projectEndpoint)"
    parameters:
    - id: "projectEndpoint"
      type: "java.lang.String"
    return:
      type: "com.google.datastore.v1.client.DatastoreOptions.Builder"
  status: "deprecated"
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.projectId(java.lang.String)"
  id: "projectId(java.lang.String)"
  parent: "com.google.datastore.v1.client.DatastoreOptions.Builder"
  langs:
  - "java"
  name: "projectId(String projectId)"
  nameWithType: "DatastoreOptions.Builder.projectId(String projectId)"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.projectId(String projectId)"
  overload: "com.google.datastore.v1.client.DatastoreOptions.Builder.projectId*"
  type: "Method"
  package: "com.google.datastore.v1.client"
  summary: "Sets the project ID used to access Cloud Datastore."
  syntax:
    content: "public DatastoreOptions.Builder projectId(String projectId)"
    parameters:
    - id: "projectId"
      type: "java.lang.String"
    return:
      type: "com.google.datastore.v1.client.DatastoreOptions.Builder"
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.transport(com.google.api.client.http.HttpTransport)"
  id: "transport(com.google.api.client.http.HttpTransport)"
  parent: "com.google.datastore.v1.client.DatastoreOptions.Builder"
  langs:
  - "java"
  name: "transport(HttpTransport transport)"
  nameWithType: "DatastoreOptions.Builder.transport(HttpTransport transport)"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.transport(HttpTransport transport)"
  overload: "com.google.datastore.v1.client.DatastoreOptions.Builder.transport*"
  type: "Method"
  package: "com.google.datastore.v1.client"
  summary: "Sets the transport used to access Cloud Datastore."
  syntax:
    content: "public DatastoreOptions.Builder transport(HttpTransport transport)"
    parameters:
    - id: "transport"
      type: "com.google.api.client.http.HttpTransport"
    return:
      type: "com.google.datastore.v1.client.DatastoreOptions.Builder"
references:
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.Builder*"
  name: "Builder"
  nameWithType: "DatastoreOptions.Builder.Builder"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.Builder"
  package: "com.google.datastore.v1.client"
- uid: "com.google.datastore.v1.client.DatastoreOptions"
  name: "DatastoreOptions"
  nameWithType: "DatastoreOptions"
  fullName: "com.google.datastore.v1.client.DatastoreOptions"
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.build*"
  name: "build"
  nameWithType: "DatastoreOptions.Builder.build"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.build"
  package: "com.google.datastore.v1.client"
- uid: "java.lang.String"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.projectId*"
  name: "projectId"
  nameWithType: "DatastoreOptions.Builder.projectId"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.projectId"
  package: "com.google.datastore.v1.client"
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.databaseId*"
  name: "databaseId"
  nameWithType: "DatastoreOptions.Builder.databaseId"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.databaseId"
  package: "com.google.datastore.v1.client"
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.host*"
  name: "host"
  nameWithType: "DatastoreOptions.Builder.host"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.host"
  package: "com.google.datastore.v1.client"
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.localHost*"
  name: "localHost"
  nameWithType: "DatastoreOptions.Builder.localHost"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.localHost"
  package: "com.google.datastore.v1.client"
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.projectEndpoint*"
  name: "projectEndpoint"
  nameWithType: "DatastoreOptions.Builder.projectEndpoint"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.projectEndpoint"
  package: "com.google.datastore.v1.client"
- uid: "com.google.api.client.http.HttpRequestInitializer"
  spec.java:
  - uid: "com.google.api.client.http.HttpRequestInitializer"
    name: "HttpRequestInitializer"
    fullName: "com.google.api.client.http.HttpRequestInitializer"
    isExternal: false
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.initializer*"
  name: "initializer"
  nameWithType: "DatastoreOptions.Builder.initializer"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.initializer"
  package: "com.google.datastore.v1.client"
- uid: "com.google.api.client.auth.oauth2.Credential"
  spec.java:
  - uid: "com.google.api.client.auth.oauth2.Credential"
    name: "Credential"
    fullName: "com.google.api.client.auth.oauth2.Credential"
    isExternal: false
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.credential*"
  name: "credential"
  nameWithType: "DatastoreOptions.Builder.credential"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.credential"
  package: "com.google.datastore.v1.client"
- uid: "com.google.api.client.http.HttpTransport"
  spec.java:
  - uid: "com.google.api.client.http.HttpTransport"
    name: "HttpTransport"
    fullName: "com.google.api.client.http.HttpTransport"
    isExternal: false
- uid: "com.google.datastore.v1.client.DatastoreOptions.Builder.transport*"
  name: "transport"
  nameWithType: "DatastoreOptions.Builder.transport"
  fullName: "com.google.datastore.v1.client.DatastoreOptions.Builder.transport"
  package: "com.google.datastore.v1.client"
- uid: "java.lang.Object.notify()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
