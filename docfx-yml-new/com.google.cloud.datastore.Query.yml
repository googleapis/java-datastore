### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.datastore.Query"
  id: "Query"
  parent: "com.google.cloud.datastore"
  children:
  - "com.google.cloud.datastore.Query.<V>newGqlQueryBuilder(com.google.cloud.datastore.Query.ResultType<V>,java.lang.String)"
  - "com.google.cloud.datastore.Query.ResultType"
  - "com.google.cloud.datastore.Query.getNamespace()"
  - "com.google.cloud.datastore.Query.newAggregationQueryBuilder()"
  - "com.google.cloud.datastore.Query.newEntityQueryBuilder()"
  - "com.google.cloud.datastore.Query.newGqlQueryBuilder(java.lang.String)"
  - "com.google.cloud.datastore.Query.newKeyQueryBuilder()"
  - "com.google.cloud.datastore.Query.newProjectionEntityQueryBuilder()"
  langs:
  - "java"
  name: "Query<V>"
  nameWithType: "Query<V>"
  fullName: "com.google.cloud.datastore.Query<V>"
  type: "Class"
  package: "com.google.cloud.datastore"
  summary: "A Google Cloud Datastore query. For usage examples see <xref uid=\"com.google.datastore.v1.GqlQuery\" data-throw-if-not-resolved=\"false\">GqlQuery</xref>, <xref uid=\"com.google.cloud.datastore.StructuredQuery\" data-throw-if-not-resolved=\"false\">StructuredQuery</xref>\n and <xref uid=\"com.google.datastore.v1.AggregationQuery\" data-throw-if-not-resolved=\"false\">AggregationQuery</xref>.\n\n <p>Note that queries require proper indexing. See <a href=\"https://cloud.google.com/datastore/docs/tools/indexconfig\">Cloud Datastore Index\n Configuration</a> for help configuring indexes.\nSee Also: <a href=\"https://cloud.google.com/datastore/docs/concepts/queries\">Datastore Queries</a>\n"
  syntax:
    content: "public abstract class Query<V> implements Serializable"
    typeParameters:
    - id: "V"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Serializable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.datastore.Query.<V>newGqlQueryBuilder(com.google.cloud.datastore.Query.ResultType<V>,java.lang.String)"
  id: "<V>newGqlQueryBuilder(com.google.cloud.datastore.Query.ResultType<V>,java.lang.String)"
  parent: "com.google.cloud.datastore.Query"
  langs:
  - "java"
  name: "<V>newGqlQueryBuilder(Query.ResultType<V> resultType, String gql)"
  nameWithType: "Query<V>.<V>newGqlQueryBuilder(Query.ResultType<V> resultType, String gql)"
  fullName: "com.google.cloud.datastore.Query<V>.<V>newGqlQueryBuilder(Query.ResultType<V> resultType, String gql)"
  overload: "com.google.cloud.datastore.Query.newGqlQueryBuilder*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns a new <xref uid=\"com.google.datastore.v1.GqlQuery\" data-throw-if-not-resolved=\"false\">GqlQuery</xref> builder.\n\n <p>Example of creating and running a typed GQL query.\n\n <pre class=\"prettyprint lang-java\"><code>\n String kind = \"my_kind\";\n String gqlQuery = \"select * from \" + kind;\n Query&lt;Entity&gt; query = Query.newGqlQueryBuilder(Query.ResultType.ENTITY, gqlQuery).build();\n QueryResults&lt;Entity&gt; results = datastore.run(query);\n // Use results\n </code></pre>\nSee Also: <a href=\"https://cloud.google.com/datastore/docs/apis/gql/gql_reference\">GQL Reference</a>\n"
  syntax:
    content: "public static GqlQuery.Builder<V> <V>newGqlQueryBuilder(Query.ResultType<V> resultType, String gql)"
    parameters:
    - id: "resultType"
      type: "com.google.cloud.datastore.Query.ResultType<V>"
    - id: "gql"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.datastore.GqlQuery.Builder<V>"
  javaType: "static method"
- uid: "com.google.cloud.datastore.Query.Query(java.lang.String)"
  id: "Query(java.lang.String)"
  parent: "com.google.cloud.datastore.Query"
  langs:
  - "java"
  name: "Query(String namespace)"
  nameWithType: "Query<V>.Query(String namespace)"
  fullName: "com.google.cloud.datastore.Query<V>.Query(String namespace)"
  overload: "com.google.cloud.datastore.Query.Query*"
  type: "Constructor"
  package: "com.google.cloud.datastore"
  syntax:
    content: " Query(String namespace)"
    parameters:
    - id: "namespace"
      type: "java.lang.String"
- uid: "com.google.cloud.datastore.Query.getNamespace()"
  id: "getNamespace()"
  parent: "com.google.cloud.datastore.Query"
  langs:
  - "java"
  name: "getNamespace()"
  nameWithType: "Query<V>.getNamespace()"
  fullName: "com.google.cloud.datastore.Query<V>.getNamespace()"
  overload: "com.google.cloud.datastore.Query.getNamespace*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "public String getNamespace()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.datastore.Query.newAggregationQueryBuilder()"
  id: "newAggregationQueryBuilder()"
  parent: "com.google.cloud.datastore.Query"
  langs:
  - "java"
  name: "newAggregationQueryBuilder()"
  nameWithType: "Query<V>.newAggregationQueryBuilder()"
  fullName: "com.google.cloud.datastore.Query<V>.newAggregationQueryBuilder()"
  overload: "com.google.cloud.datastore.Query.newAggregationQueryBuilder*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns a new <xref uid=\"com.google.datastore.v1.AggregationQuery\" data-throw-if-not-resolved=\"false\">AggregationQuery</xref> builder.\n\n <p>Example of creating and running an <xref uid=\"com.google.datastore.v1.AggregationQuery\" data-throw-if-not-resolved=\"false\">AggregationQuery</xref>.\n\n <p><xref uid=\"com.google.cloud.datastore.StructuredQuery\" data-throw-if-not-resolved=\"false\">StructuredQuery</xref> example:\n\n <pre class=\"prettyprint lang-java\"><code>\n EntityQuery selectAllQuery = Query.newEntityQueryBuilder()\n    .setKind(\"Task\")\n    .build();\n AggregationQuery aggregationQuery = Query.newAggregationQueryBuilder()\n    .addAggregation(count().as(\"total_count\"))\n    .over(selectAllQuery)\n    .build();\n AggregationResults aggregationResults = datastore.runAggregation(aggregationQuery);\n // Use aggregationResults\n </code></pre>\n\n <p><xref uid=\"com.google.datastore.v1.GqlQuery\" data-throw-if-not-resolved=\"false\">GqlQuery</xref> example:\n\n <pre class=\"prettyprint lang-java\"><code>\n GqlQuery<?> selectAllGqlQuery = Query.newGqlQueryBuilder(\n         \"AGGREGATE COUNT(*) AS total_count OVER(SELECT * FROM Task)\"\n     )\n     .setAllowLiteral(true)\n     .build();\n AggregationQuery aggregationQuery = Query.newAggregationQueryBuilder()\n     .over(selectAllGqlQuery)\n     .build();\n AggregationResults aggregationResults = datastore.runAggregation(aggregationQuery);\n // Use aggregationResults\n </code></pre>"
  syntax:
    content: "public static AggregationQuery.Builder newAggregationQueryBuilder()"
    return:
      type: "com.google.cloud.datastore.AggregationQuery.Builder"
  javaType: "static method"
- uid: "com.google.cloud.datastore.Query.newEntityQueryBuilder()"
  id: "newEntityQueryBuilder()"
  parent: "com.google.cloud.datastore.Query"
  langs:
  - "java"
  name: "newEntityQueryBuilder()"
  nameWithType: "Query<V>.newEntityQueryBuilder()"
  fullName: "com.google.cloud.datastore.Query<V>.newEntityQueryBuilder()"
  overload: "com.google.cloud.datastore.Query.newEntityQueryBuilder*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns a new <xref uid=\"com.google.cloud.datastore.StructuredQuery\" data-throw-if-not-resolved=\"false\">StructuredQuery</xref> builder for full (complete entities) queries.\n\n <p>Example of creating and running an entity query.\n\n <pre class=\"prettyprint lang-java\"><code>\n String kind = \"my_kind\";\n Query&lt;Entity&gt; query = Query.newEntityQueryBuilder().setKind(kind).build();\n QueryResults&lt;Entity&gt; results = datastore.run(query);\n // Use results\n </code></pre>"
  syntax:
    content: "public static EntityQuery.Builder newEntityQueryBuilder()"
    return:
      type: "com.google.cloud.datastore.EntityQuery.Builder"
  javaType: "static method"
- uid: "com.google.cloud.datastore.Query.newGqlQueryBuilder(java.lang.String)"
  id: "newGqlQueryBuilder(java.lang.String)"
  parent: "com.google.cloud.datastore.Query"
  langs:
  - "java"
  name: "newGqlQueryBuilder(String gql)"
  nameWithType: "Query<V>.newGqlQueryBuilder(String gql)"
  fullName: "com.google.cloud.datastore.Query<V>.newGqlQueryBuilder(String gql)"
  overload: "com.google.cloud.datastore.Query.newGqlQueryBuilder*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns a new <xref uid=\"com.google.datastore.v1.GqlQuery\" data-throw-if-not-resolved=\"false\">GqlQuery</xref> builder.\n\n <p>Example of creating and running a GQL query.\n\n <pre class=\"prettyprint lang-java\"><code>\n String kind = \"my_kind\";\n String gqlQuery = \"select * from \" + kind;\n Query<?> query = Query.newGqlQueryBuilder(gqlQuery).build();\n QueryResults<?> results = datastore.run(query);\n // Use results\n </code></pre>\nSee Also: <a href=\"https://cloud.google.com/datastore/docs/apis/gql/gql_reference\">GQL Reference</a>\n"
  syntax:
    content: "public static GqlQuery.Builder<?> newGqlQueryBuilder(String gql)"
    parameters:
    - id: "gql"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.datastore.GqlQuery.Builder<?>"
  javaType: "static method"
- uid: "com.google.cloud.datastore.Query.newKeyQueryBuilder()"
  id: "newKeyQueryBuilder()"
  parent: "com.google.cloud.datastore.Query"
  langs:
  - "java"
  name: "newKeyQueryBuilder()"
  nameWithType: "Query<V>.newKeyQueryBuilder()"
  fullName: "com.google.cloud.datastore.Query<V>.newKeyQueryBuilder()"
  overload: "com.google.cloud.datastore.Query.newKeyQueryBuilder*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns a new <xref uid=\"com.google.cloud.datastore.StructuredQuery\" data-throw-if-not-resolved=\"false\">StructuredQuery</xref> builder for key only queries.\n\n <p>Example of creating and running a key query.\n\n <pre class=\"prettyprint lang-java\"><code>\n String kind = \"my_kind\";\n Query&lt;Key&gt; query = Query.newKeyQueryBuilder().setKind(kind).build();\n QueryResults&lt;Key&gt; results = datastore.run(query);\n // Use results\n </code></pre>"
  syntax:
    content: "public static KeyQuery.Builder newKeyQueryBuilder()"
    return:
      type: "com.google.cloud.datastore.KeyQuery.Builder"
  javaType: "static method"
- uid: "com.google.cloud.datastore.Query.newProjectionEntityQueryBuilder()"
  id: "newProjectionEntityQueryBuilder()"
  parent: "com.google.cloud.datastore.Query"
  langs:
  - "java"
  name: "newProjectionEntityQueryBuilder()"
  nameWithType: "Query<V>.newProjectionEntityQueryBuilder()"
  fullName: "com.google.cloud.datastore.Query<V>.newProjectionEntityQueryBuilder()"
  overload: "com.google.cloud.datastore.Query.newProjectionEntityQueryBuilder*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns a new <xref uid=\"com.google.cloud.datastore.StructuredQuery\" data-throw-if-not-resolved=\"false\">StructuredQuery</xref> builder for projection queries.\n\n <p>Example of creating and running a projection entity query.\n\n <pre class=\"prettyprint lang-java\"><code>\n String kind = \"my_kind\";\n String property = \"my_property\";\n Query&lt;ProjectionEntity&gt; query = Query.newProjectionEntityQueryBuilder()\n     .setKind(kind)\n     .addProjection(property)\n     .build();\n QueryResults&lt;ProjectionEntity&gt; results = datastore.run(query);\n // Use results\n </code></pre>"
  syntax:
    content: "public static ProjectionEntityQuery.Builder newProjectionEntityQueryBuilder()"
    return:
      type: "com.google.cloud.datastore.ProjectionEntityQuery.Builder"
  javaType: "static method"
references:
- uid: "java.lang.String"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"
- uid: "com.google.cloud.datastore.Query.Query*"
  name: "Query"
  nameWithType: "Query<V>.Query"
  fullName: "com.google.cloud.datastore.Query<V>.Query"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Query.getNamespace*"
  name: "getNamespace"
  nameWithType: "Query<V>.getNamespace"
  fullName: "com.google.cloud.datastore.Query<V>.getNamespace"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.GqlQuery.Builder<?>"
  spec.java:
  - uid: "com.google.cloud.datastore.GqlQuery.Builder"
    name: "Builder"
    fullName: "com.google.cloud.datastore.GqlQuery.Builder"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "?"
    name: "?"
    fullName: "?"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.Query.newGqlQueryBuilder*"
  name: "newGqlQueryBuilder"
  nameWithType: "Query<V>.newGqlQueryBuilder"
  fullName: "com.google.cloud.datastore.Query<V>.newGqlQueryBuilder"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Query.ResultType<V>"
  spec.java:
  - uid: "com.google.cloud.datastore.Query.ResultType"
    name: "ResultType"
    fullName: "com.google.cloud.datastore.Query.ResultType"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "V"
    name: "V"
    fullName: "V"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.GqlQuery.Builder<V>"
  spec.java:
  - uid: "com.google.cloud.datastore.GqlQuery.Builder"
    name: "Builder"
    fullName: "com.google.cloud.datastore.GqlQuery.Builder"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "V"
    name: "V"
    fullName: "V"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.EntityQuery.Builder"
  name: "EntityQuery.Builder"
  nameWithType: "EntityQuery.Builder"
  fullName: "com.google.cloud.datastore.EntityQuery.Builder"
- uid: "com.google.cloud.datastore.Query.newEntityQueryBuilder*"
  name: "newEntityQueryBuilder"
  nameWithType: "Query<V>.newEntityQueryBuilder"
  fullName: "com.google.cloud.datastore.Query<V>.newEntityQueryBuilder"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.KeyQuery.Builder"
  name: "KeyQuery.Builder"
  nameWithType: "KeyQuery.Builder"
  fullName: "com.google.cloud.datastore.KeyQuery.Builder"
- uid: "com.google.cloud.datastore.Query.newKeyQueryBuilder*"
  name: "newKeyQueryBuilder"
  nameWithType: "Query<V>.newKeyQueryBuilder"
  fullName: "com.google.cloud.datastore.Query<V>.newKeyQueryBuilder"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.ProjectionEntityQuery.Builder"
  name: "ProjectionEntityQuery.Builder"
  nameWithType: "ProjectionEntityQuery.Builder"
  fullName: "com.google.cloud.datastore.ProjectionEntityQuery.Builder"
- uid: "com.google.cloud.datastore.Query.newProjectionEntityQueryBuilder*"
  name: "newProjectionEntityQueryBuilder"
  nameWithType: "Query<V>.newProjectionEntityQueryBuilder"
  fullName: "com.google.cloud.datastore.Query<V>.newProjectionEntityQueryBuilder"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.AggregationQuery.Builder"
  name: "AggregationQuery.Builder"
  nameWithType: "AggregationQuery.Builder"
  fullName: "com.google.cloud.datastore.AggregationQuery.Builder"
- uid: "com.google.cloud.datastore.Query.newAggregationQueryBuilder*"
  name: "newAggregationQueryBuilder"
  nameWithType: "Query<V>.newAggregationQueryBuilder"
  fullName: "com.google.cloud.datastore.Query<V>.newAggregationQueryBuilder"
  package: "com.google.cloud.datastore"
- uid: "V"
  name: "V"
  nameWithType: "V"
  fullName: "V"
- uid: "java.io.Serializable"
  href: "https://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html"
  name: "Serializable"
  nameWithType: "Serializable"
  fullName: "java.io.Serializable"
- uid: "java.lang.Object.notify()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.google.cloud.datastore.Query.ResultType"
  name: "Query.ResultType<V>"
  nameWithType: "Query.ResultType<V>"
  fullName: "com.google.cloud.datastore.Query.ResultType<V>"
- uid: "com.google.cloud.datastore.GqlQuery.Builder"
  name: "GqlQuery.Builder"
  nameWithType: "GqlQuery.Builder"
  fullName: "com.google.cloud.datastore.GqlQuery.Builder"
- uid: "?"
  name: "?"
  nameWithType: "?"
  fullName: "?"
