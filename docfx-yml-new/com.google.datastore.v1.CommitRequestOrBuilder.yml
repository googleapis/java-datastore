### YamlMime:ManagedReference
items:
- uid: "com.google.datastore.v1.CommitRequestOrBuilder"
  id: "CommitRequestOrBuilder"
  parent: "com.google.datastore.v1"
  children:
  - "com.google.datastore.v1.CommitRequestOrBuilder.getDatabaseId()"
  - "com.google.datastore.v1.CommitRequestOrBuilder.getDatabaseIdBytes()"
  - "com.google.datastore.v1.CommitRequestOrBuilder.getMode()"
  - "com.google.datastore.v1.CommitRequestOrBuilder.getModeValue()"
  - "com.google.datastore.v1.CommitRequestOrBuilder.getMutations(int)"
  - "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsCount()"
  - "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsList()"
  - "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsOrBuilder(int)"
  - "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsOrBuilderList()"
  - "com.google.datastore.v1.CommitRequestOrBuilder.getProjectId()"
  - "com.google.datastore.v1.CommitRequestOrBuilder.getProjectIdBytes()"
  - "com.google.datastore.v1.CommitRequestOrBuilder.getSingleUseTransaction()"
  - "com.google.datastore.v1.CommitRequestOrBuilder.getSingleUseTransactionOrBuilder()"
  - "com.google.datastore.v1.CommitRequestOrBuilder.getTransaction()"
  - "com.google.datastore.v1.CommitRequestOrBuilder.getTransactionSelectorCase()"
  - "com.google.datastore.v1.CommitRequestOrBuilder.hasSingleUseTransaction()"
  - "com.google.datastore.v1.CommitRequestOrBuilder.hasTransaction()"
  langs:
  - "java"
  name: "CommitRequestOrBuilder"
  nameWithType: "CommitRequestOrBuilder"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder"
  type: "Interface"
  package: "com.google.datastore.v1"
  syntax:
    content: "public interface CommitRequestOrBuilder extends MessageOrBuilder"
  implements:
  - "com.google.protobuf.MessageOrBuilder"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getDatabaseId()"
  id: "getDatabaseId()"
  parent: "com.google.datastore.v1.CommitRequestOrBuilder"
  langs:
  - "java"
  name: "getDatabaseId()"
  nameWithType: "CommitRequestOrBuilder.getDatabaseId()"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getDatabaseId()"
  overload: "com.google.datastore.v1.CommitRequestOrBuilder.getDatabaseId*"
  type: "Method"
  package: "com.google.datastore.v1"
  summary: "\n The ID of the database against which to make the request.\n\n '(default)' is not allowed; please use empty string '' to refer the default\n database.\n \n\n <code>string database_id = 9;</code>"
  syntax:
    content: "public abstract String getDatabaseId()"
    return:
      type: "java.lang.String"
      description: "The databaseId."
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getDatabaseIdBytes()"
  id: "getDatabaseIdBytes()"
  parent: "com.google.datastore.v1.CommitRequestOrBuilder"
  langs:
  - "java"
  name: "getDatabaseIdBytes()"
  nameWithType: "CommitRequestOrBuilder.getDatabaseIdBytes()"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getDatabaseIdBytes()"
  overload: "com.google.datastore.v1.CommitRequestOrBuilder.getDatabaseIdBytes*"
  type: "Method"
  package: "com.google.datastore.v1"
  summary: "\n The ID of the database against which to make the request.\n\n '(default)' is not allowed; please use empty string '' to refer the default\n database.\n \n\n <code>string database_id = 9;</code>"
  syntax:
    content: "public abstract ByteString getDatabaseIdBytes()"
    return:
      type: "com.google.protobuf.ByteString"
      description: "The bytes for databaseId."
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getMode()"
  id: "getMode()"
  parent: "com.google.datastore.v1.CommitRequestOrBuilder"
  langs:
  - "java"
  name: "getMode()"
  nameWithType: "CommitRequestOrBuilder.getMode()"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getMode()"
  overload: "com.google.datastore.v1.CommitRequestOrBuilder.getMode*"
  type: "Method"
  package: "com.google.datastore.v1"
  summary: "\n The type of commit to perform. Defaults to <code>TRANSACTIONAL</code>.\n \n\n <code>.google.datastore.v1.CommitRequest.Mode mode = 5;</code>"
  syntax:
    content: "public abstract CommitRequest.Mode getMode()"
    return:
      type: "com.google.datastore.v1.CommitRequest.Mode"
      description: "The mode."
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getModeValue()"
  id: "getModeValue()"
  parent: "com.google.datastore.v1.CommitRequestOrBuilder"
  langs:
  - "java"
  name: "getModeValue()"
  nameWithType: "CommitRequestOrBuilder.getModeValue()"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getModeValue()"
  overload: "com.google.datastore.v1.CommitRequestOrBuilder.getModeValue*"
  type: "Method"
  package: "com.google.datastore.v1"
  summary: "\n The type of commit to perform. Defaults to <code>TRANSACTIONAL</code>.\n \n\n <code>.google.datastore.v1.CommitRequest.Mode mode = 5;</code>"
  syntax:
    content: "public abstract int getModeValue()"
    return:
      type: "int"
      description: "The enum numeric value on the wire for mode."
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getMutations(int)"
  id: "getMutations(int)"
  parent: "com.google.datastore.v1.CommitRequestOrBuilder"
  langs:
  - "java"
  name: "getMutations(int index)"
  nameWithType: "CommitRequestOrBuilder.getMutations(int index)"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getMutations(int index)"
  overload: "com.google.datastore.v1.CommitRequestOrBuilder.getMutations*"
  type: "Method"
  package: "com.google.datastore.v1"
  summary: "\n The mutations to perform.\n\n When mode is <code>TRANSACTIONAL</code>, mutations affecting a single entity are\n applied in order. The following sequences of mutations affecting a single\n entity are not permitted in a single <code>Commit</code> request:\n\n - <code>insert</code> followed by <code>insert</code>\n - <code>update</code> followed by <code>insert</code>\n - <code>upsert</code> followed by <code>insert</code>\n - <code>delete</code> followed by <code>update</code>\n\n When mode is <code>NON_TRANSACTIONAL</code>, no two mutations may affect a single\n entity.\n \n\n <code>repeated .google.datastore.v1.Mutation mutations = 6;</code>"
  syntax:
    content: "public abstract Mutation getMutations(int index)"
    parameters:
    - id: "index"
      type: "int"
    return:
      type: "com.google.datastore.v1.Mutation"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsCount()"
  id: "getMutationsCount()"
  parent: "com.google.datastore.v1.CommitRequestOrBuilder"
  langs:
  - "java"
  name: "getMutationsCount()"
  nameWithType: "CommitRequestOrBuilder.getMutationsCount()"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsCount()"
  overload: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsCount*"
  type: "Method"
  package: "com.google.datastore.v1"
  summary: "\n The mutations to perform.\n\n When mode is <code>TRANSACTIONAL</code>, mutations affecting a single entity are\n applied in order. The following sequences of mutations affecting a single\n entity are not permitted in a single <code>Commit</code> request:\n\n - <code>insert</code> followed by <code>insert</code>\n - <code>update</code> followed by <code>insert</code>\n - <code>upsert</code> followed by <code>insert</code>\n - <code>delete</code> followed by <code>update</code>\n\n When mode is <code>NON_TRANSACTIONAL</code>, no two mutations may affect a single\n entity.\n \n\n <code>repeated .google.datastore.v1.Mutation mutations = 6;</code>"
  syntax:
    content: "public abstract int getMutationsCount()"
    return:
      type: "int"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsList()"
  id: "getMutationsList()"
  parent: "com.google.datastore.v1.CommitRequestOrBuilder"
  langs:
  - "java"
  name: "getMutationsList()"
  nameWithType: "CommitRequestOrBuilder.getMutationsList()"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsList()"
  overload: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsList*"
  type: "Method"
  package: "com.google.datastore.v1"
  summary: "\n The mutations to perform.\n\n When mode is <code>TRANSACTIONAL</code>, mutations affecting a single entity are\n applied in order. The following sequences of mutations affecting a single\n entity are not permitted in a single <code>Commit</code> request:\n\n - <code>insert</code> followed by <code>insert</code>\n - <code>update</code> followed by <code>insert</code>\n - <code>upsert</code> followed by <code>insert</code>\n - <code>delete</code> followed by <code>update</code>\n\n When mode is <code>NON_TRANSACTIONAL</code>, no two mutations may affect a single\n entity.\n \n\n <code>repeated .google.datastore.v1.Mutation mutations = 6;</code>"
  syntax:
    content: "public abstract List<Mutation> getMutationsList()"
    return:
      type: "java.util.List<com.google.datastore.v1.Mutation>"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsOrBuilder(int)"
  id: "getMutationsOrBuilder(int)"
  parent: "com.google.datastore.v1.CommitRequestOrBuilder"
  langs:
  - "java"
  name: "getMutationsOrBuilder(int index)"
  nameWithType: "CommitRequestOrBuilder.getMutationsOrBuilder(int index)"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsOrBuilder(int index)"
  overload: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsOrBuilder*"
  type: "Method"
  package: "com.google.datastore.v1"
  summary: "\n The mutations to perform.\n\n When mode is <code>TRANSACTIONAL</code>, mutations affecting a single entity are\n applied in order. The following sequences of mutations affecting a single\n entity are not permitted in a single <code>Commit</code> request:\n\n - <code>insert</code> followed by <code>insert</code>\n - <code>update</code> followed by <code>insert</code>\n - <code>upsert</code> followed by <code>insert</code>\n - <code>delete</code> followed by <code>update</code>\n\n When mode is <code>NON_TRANSACTIONAL</code>, no two mutations may affect a single\n entity.\n \n\n <code>repeated .google.datastore.v1.Mutation mutations = 6;</code>"
  syntax:
    content: "public abstract MutationOrBuilder getMutationsOrBuilder(int index)"
    parameters:
    - id: "index"
      type: "int"
    return:
      type: "com.google.datastore.v1.MutationOrBuilder"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsOrBuilderList()"
  id: "getMutationsOrBuilderList()"
  parent: "com.google.datastore.v1.CommitRequestOrBuilder"
  langs:
  - "java"
  name: "getMutationsOrBuilderList()"
  nameWithType: "CommitRequestOrBuilder.getMutationsOrBuilderList()"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsOrBuilderList()"
  overload: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsOrBuilderList*"
  type: "Method"
  package: "com.google.datastore.v1"
  summary: "\n The mutations to perform.\n\n When mode is <code>TRANSACTIONAL</code>, mutations affecting a single entity are\n applied in order. The following sequences of mutations affecting a single\n entity are not permitted in a single <code>Commit</code> request:\n\n - <code>insert</code> followed by <code>insert</code>\n - <code>update</code> followed by <code>insert</code>\n - <code>upsert</code> followed by <code>insert</code>\n - <code>delete</code> followed by <code>update</code>\n\n When mode is <code>NON_TRANSACTIONAL</code>, no two mutations may affect a single\n entity.\n \n\n <code>repeated .google.datastore.v1.Mutation mutations = 6;</code>"
  syntax:
    content: "public abstract List<? extends MutationOrBuilder> getMutationsOrBuilderList()"
    return:
      type: "java.util.List<? extends com.google.datastore.v1.MutationOrBuilder>"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getProjectId()"
  id: "getProjectId()"
  parent: "com.google.datastore.v1.CommitRequestOrBuilder"
  langs:
  - "java"
  name: "getProjectId()"
  nameWithType: "CommitRequestOrBuilder.getProjectId()"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getProjectId()"
  overload: "com.google.datastore.v1.CommitRequestOrBuilder.getProjectId*"
  type: "Method"
  package: "com.google.datastore.v1"
  summary: "\n Required. The ID of the project against which to make the request.\n \n\n <code>string project_id = 8 [(.google.api.field_behavior) = REQUIRED];</code>"
  syntax:
    content: "public abstract String getProjectId()"
    return:
      type: "java.lang.String"
      description: "The projectId."
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getProjectIdBytes()"
  id: "getProjectIdBytes()"
  parent: "com.google.datastore.v1.CommitRequestOrBuilder"
  langs:
  - "java"
  name: "getProjectIdBytes()"
  nameWithType: "CommitRequestOrBuilder.getProjectIdBytes()"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getProjectIdBytes()"
  overload: "com.google.datastore.v1.CommitRequestOrBuilder.getProjectIdBytes*"
  type: "Method"
  package: "com.google.datastore.v1"
  summary: "\n Required. The ID of the project against which to make the request.\n \n\n <code>string project_id = 8 [(.google.api.field_behavior) = REQUIRED];</code>"
  syntax:
    content: "public abstract ByteString getProjectIdBytes()"
    return:
      type: "com.google.protobuf.ByteString"
      description: "The bytes for projectId."
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getSingleUseTransaction()"
  id: "getSingleUseTransaction()"
  parent: "com.google.datastore.v1.CommitRequestOrBuilder"
  langs:
  - "java"
  name: "getSingleUseTransaction()"
  nameWithType: "CommitRequestOrBuilder.getSingleUseTransaction()"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getSingleUseTransaction()"
  overload: "com.google.datastore.v1.CommitRequestOrBuilder.getSingleUseTransaction*"
  type: "Method"
  package: "com.google.datastore.v1"
  summary: "\n Options for beginning a new transaction for this request.\n The transaction is committed when the request completes. If specified,\n <xref uid=\"\" data-throw-if-not-resolved=\"false\">TransactionOptions.mode</xref> must be\n <xref uid=\"\" data-throw-if-not-resolved=\"false\">TransactionOptions.ReadWrite</xref>.\n \n\n <code>.google.datastore.v1.TransactionOptions single_use_transaction = 10;</code>"
  syntax:
    content: "public abstract TransactionOptions getSingleUseTransaction()"
    return:
      type: "com.google.datastore.v1.TransactionOptions"
      description: "The singleUseTransaction."
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getSingleUseTransactionOrBuilder()"
  id: "getSingleUseTransactionOrBuilder()"
  parent: "com.google.datastore.v1.CommitRequestOrBuilder"
  langs:
  - "java"
  name: "getSingleUseTransactionOrBuilder()"
  nameWithType: "CommitRequestOrBuilder.getSingleUseTransactionOrBuilder()"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getSingleUseTransactionOrBuilder()"
  overload: "com.google.datastore.v1.CommitRequestOrBuilder.getSingleUseTransactionOrBuilder*"
  type: "Method"
  package: "com.google.datastore.v1"
  summary: "\n Options for beginning a new transaction for this request.\n The transaction is committed when the request completes. If specified,\n <xref uid=\"\" data-throw-if-not-resolved=\"false\">TransactionOptions.mode</xref> must be\n <xref uid=\"\" data-throw-if-not-resolved=\"false\">TransactionOptions.ReadWrite</xref>.\n \n\n <code>.google.datastore.v1.TransactionOptions single_use_transaction = 10;</code>"
  syntax:
    content: "public abstract TransactionOptionsOrBuilder getSingleUseTransactionOrBuilder()"
    return:
      type: "com.google.datastore.v1.TransactionOptionsOrBuilder"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getTransaction()"
  id: "getTransaction()"
  parent: "com.google.datastore.v1.CommitRequestOrBuilder"
  langs:
  - "java"
  name: "getTransaction()"
  nameWithType: "CommitRequestOrBuilder.getTransaction()"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getTransaction()"
  overload: "com.google.datastore.v1.CommitRequestOrBuilder.getTransaction*"
  type: "Method"
  package: "com.google.datastore.v1"
  summary: "\n The identifier of the transaction associated with the commit. A\n transaction identifier is returned by a call to\n <xref uid=\"\" data-throw-if-not-resolved=\"false\">Datastore.BeginTransaction</xref>.\n \n\n <code>bytes transaction = 1;</code>"
  syntax:
    content: "public abstract ByteString getTransaction()"
    return:
      type: "com.google.protobuf.ByteString"
      description: "The transaction."
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getTransactionSelectorCase()"
  id: "getTransactionSelectorCase()"
  parent: "com.google.datastore.v1.CommitRequestOrBuilder"
  langs:
  - "java"
  name: "getTransactionSelectorCase()"
  nameWithType: "CommitRequestOrBuilder.getTransactionSelectorCase()"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getTransactionSelectorCase()"
  overload: "com.google.datastore.v1.CommitRequestOrBuilder.getTransactionSelectorCase*"
  type: "Method"
  package: "com.google.datastore.v1"
  syntax:
    content: "public abstract CommitRequest.TransactionSelectorCase getTransactionSelectorCase()"
    return:
      type: "com.google.datastore.v1.CommitRequest.TransactionSelectorCase"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.hasSingleUseTransaction()"
  id: "hasSingleUseTransaction()"
  parent: "com.google.datastore.v1.CommitRequestOrBuilder"
  langs:
  - "java"
  name: "hasSingleUseTransaction()"
  nameWithType: "CommitRequestOrBuilder.hasSingleUseTransaction()"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.hasSingleUseTransaction()"
  overload: "com.google.datastore.v1.CommitRequestOrBuilder.hasSingleUseTransaction*"
  type: "Method"
  package: "com.google.datastore.v1"
  summary: "\n Options for beginning a new transaction for this request.\n The transaction is committed when the request completes. If specified,\n <xref uid=\"\" data-throw-if-not-resolved=\"false\">TransactionOptions.mode</xref> must be\n <xref uid=\"\" data-throw-if-not-resolved=\"false\">TransactionOptions.ReadWrite</xref>.\n \n\n <code>.google.datastore.v1.TransactionOptions single_use_transaction = 10;</code>"
  syntax:
    content: "public abstract boolean hasSingleUseTransaction()"
    return:
      type: "boolean"
      description: "Whether the singleUseTransaction field is set."
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.hasTransaction()"
  id: "hasTransaction()"
  parent: "com.google.datastore.v1.CommitRequestOrBuilder"
  langs:
  - "java"
  name: "hasTransaction()"
  nameWithType: "CommitRequestOrBuilder.hasTransaction()"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.hasTransaction()"
  overload: "com.google.datastore.v1.CommitRequestOrBuilder.hasTransaction*"
  type: "Method"
  package: "com.google.datastore.v1"
  summary: "\n The identifier of the transaction associated with the commit. A\n transaction identifier is returned by a call to\n <xref uid=\"\" data-throw-if-not-resolved=\"false\">Datastore.BeginTransaction</xref>.\n \n\n <code>bytes transaction = 1;</code>"
  syntax:
    content: "public abstract boolean hasTransaction()"
    return:
      type: "boolean"
      description: "Whether the transaction field is set."
references:
- uid: "java.lang.String"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getProjectId*"
  name: "getProjectId"
  nameWithType: "CommitRequestOrBuilder.getProjectId"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getProjectId"
  package: "com.google.datastore.v1"
- uid: "com.google.protobuf.ByteString"
  isExternal: true
  spec.java:
  - uid: "com.google.protobuf.ByteString"
    name: "ByteString"
    fullName: "com.google.protobuf.ByteString"
    isExternal: true
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getProjectIdBytes*"
  name: "getProjectIdBytes"
  nameWithType: "CommitRequestOrBuilder.getProjectIdBytes"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getProjectIdBytes"
  package: "com.google.datastore.v1"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getDatabaseId*"
  name: "getDatabaseId"
  nameWithType: "CommitRequestOrBuilder.getDatabaseId"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getDatabaseId"
  package: "com.google.datastore.v1"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getDatabaseIdBytes*"
  name: "getDatabaseIdBytes"
  nameWithType: "CommitRequestOrBuilder.getDatabaseIdBytes"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getDatabaseIdBytes"
  package: "com.google.datastore.v1"
- uid: "int"
  href: "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
    isExternal: false
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getModeValue*"
  name: "getModeValue"
  nameWithType: "CommitRequestOrBuilder.getModeValue"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getModeValue"
  package: "com.google.datastore.v1"
- uid: "com.google.datastore.v1.CommitRequest.Mode"
  name: "CommitRequest.Mode"
  nameWithType: "CommitRequest.Mode"
  fullName: "com.google.datastore.v1.CommitRequest.Mode"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getMode*"
  name: "getMode"
  nameWithType: "CommitRequestOrBuilder.getMode"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getMode"
  package: "com.google.datastore.v1"
- uid: "boolean"
  href: "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
    isExternal: false
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.hasTransaction*"
  name: "hasTransaction"
  nameWithType: "CommitRequestOrBuilder.hasTransaction"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.hasTransaction"
  package: "com.google.datastore.v1"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getTransaction*"
  name: "getTransaction"
  nameWithType: "CommitRequestOrBuilder.getTransaction"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getTransaction"
  package: "com.google.datastore.v1"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.hasSingleUseTransaction*"
  name: "hasSingleUseTransaction"
  nameWithType: "CommitRequestOrBuilder.hasSingleUseTransaction"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.hasSingleUseTransaction"
  package: "com.google.datastore.v1"
- uid: "com.google.datastore.v1.TransactionOptions"
  name: "TransactionOptions"
  nameWithType: "TransactionOptions"
  fullName: "com.google.datastore.v1.TransactionOptions"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getSingleUseTransaction*"
  name: "getSingleUseTransaction"
  nameWithType: "CommitRequestOrBuilder.getSingleUseTransaction"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getSingleUseTransaction"
  package: "com.google.datastore.v1"
- uid: "com.google.datastore.v1.TransactionOptionsOrBuilder"
  name: "TransactionOptionsOrBuilder"
  nameWithType: "TransactionOptionsOrBuilder"
  fullName: "com.google.datastore.v1.TransactionOptionsOrBuilder"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getSingleUseTransactionOrBuilder*"
  name: "getSingleUseTransactionOrBuilder"
  nameWithType: "CommitRequestOrBuilder.getSingleUseTransactionOrBuilder"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getSingleUseTransactionOrBuilder"
  package: "com.google.datastore.v1"
- uid: "java.util.List<com.google.datastore.v1.Mutation>"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/List<com/google/datastore/v1/Mutation>.html"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "com.google.datastore.v1.Mutation"
    name: "Mutation"
    fullName: "com.google.datastore.v1.Mutation"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsList*"
  name: "getMutationsList"
  nameWithType: "CommitRequestOrBuilder.getMutationsList"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsList"
  package: "com.google.datastore.v1"
- uid: "com.google.datastore.v1.Mutation"
  name: "Mutation"
  nameWithType: "Mutation"
  fullName: "com.google.datastore.v1.Mutation"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getMutations*"
  name: "getMutations"
  nameWithType: "CommitRequestOrBuilder.getMutations"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getMutations"
  package: "com.google.datastore.v1"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsCount*"
  name: "getMutationsCount"
  nameWithType: "CommitRequestOrBuilder.getMutationsCount"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsCount"
  package: "com.google.datastore.v1"
- uid: "java.util.List<? extends com.google.datastore.v1.MutationOrBuilder>"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/List<? extends com/google/datastore/v1/MutationOrBuilder>.html"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "? extends com.google.datastore.v1.MutationOrBuilder"
    name: "MutationOrBuilder"
    fullName: "? extends com.google.datastore.v1.MutationOrBuilder"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsOrBuilderList*"
  name: "getMutationsOrBuilderList"
  nameWithType: "CommitRequestOrBuilder.getMutationsOrBuilderList"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsOrBuilderList"
  package: "com.google.datastore.v1"
- uid: "com.google.datastore.v1.MutationOrBuilder"
  name: "MutationOrBuilder"
  nameWithType: "MutationOrBuilder"
  fullName: "com.google.datastore.v1.MutationOrBuilder"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsOrBuilder*"
  name: "getMutationsOrBuilder"
  nameWithType: "CommitRequestOrBuilder.getMutationsOrBuilder"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getMutationsOrBuilder"
  package: "com.google.datastore.v1"
- uid: "com.google.datastore.v1.CommitRequest.TransactionSelectorCase"
  name: "CommitRequest.TransactionSelectorCase"
  nameWithType: "CommitRequest.TransactionSelectorCase"
  fullName: "com.google.datastore.v1.CommitRequest.TransactionSelectorCase"
- uid: "com.google.datastore.v1.CommitRequestOrBuilder.getTransactionSelectorCase*"
  name: "getTransactionSelectorCase"
  nameWithType: "CommitRequestOrBuilder.getTransactionSelectorCase"
  fullName: "com.google.datastore.v1.CommitRequestOrBuilder.getTransactionSelectorCase"
  package: "com.google.datastore.v1"
- uid: "com.google.protobuf.MessageOrBuilder"
  isExternal: true
  name: "MessageOrBuilder"
  nameWithType: "MessageOrBuilder"
  fullName: "com.google.protobuf.MessageOrBuilder"
- uid: "java.util.List"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "? extends com.google.datastore.v1.MutationOrBuilder"
  name: "? extends MutationOrBuilder"
  nameWithType: "? extends MutationOrBuilder"
  fullName: "? extends com.google.datastore.v1.MutationOrBuilder"
