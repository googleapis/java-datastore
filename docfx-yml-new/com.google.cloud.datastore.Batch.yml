### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.datastore.Batch"
  id: "Batch"
  parent: "com.google.cloud.datastore"
  children:
  - "com.google.cloud.datastore.Batch.Response"
  - "com.google.cloud.datastore.Batch.add(com.google.cloud.datastore.FullEntity<?>)"
  - "com.google.cloud.datastore.Batch.add(com.google.cloud.datastore.FullEntity<?>...)"
  - "com.google.cloud.datastore.Batch.getDatastore()"
  - "com.google.cloud.datastore.Batch.submit()"
  langs:
  - "java"
  name: "Batch"
  nameWithType: "Batch"
  fullName: "com.google.cloud.datastore.Batch"
  type: "Interface"
  package: "com.google.cloud.datastore"
  summary: "An interface to represent a batch of write operations. Any write operation that is applied on a\n batch will only be sent to the Datastore upon <xref uid=\"com.google.cloud.datastore.Batch.submit*\" data-throw-if-not-resolved=\"false\">#submit</xref>. A usage example:\n\n <pre class=\"prettyprint lang-java\"><code>\n Entity entity1 = datastore.get(key1);\n Batch batch = datastore.newBatch();\n Entity entity2 = Entity.newBuilder(key2).set(\"name\", \"John\").build();\n entity1 = Entity.newBuilder(entity1).clear().setNull(\"bla\").build();\n Entity entity3 = Entity.newBuilder(key3).set(\"title\", \"title\").build();\n batch.update(entity1);\n batch.add(entity2, entity3);\n batch.submit();\n </code></pre>\n\n <p><b> WARNING: This class maintains an internal state in terms of <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.LinkedHashMap</xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.LinkedHashSet</xref> which gets updated on every method\n call performing CRUD operations to record the mutations. Since <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.LinkedHashMap</xref> is\n not thread safe as per its <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html\">documentation</a>,\n This class too should not be treated as a thread safe class. </b>"
  syntax:
    content: "public interface Batch extends DatastoreBatchWriter"
  implements:
  - "com.google.cloud.datastore.DatastoreBatchWriter"
- uid: "com.google.cloud.datastore.Batch.add(com.google.cloud.datastore.FullEntity<?>)"
  id: "add(com.google.cloud.datastore.FullEntity<?>)"
  parent: "com.google.cloud.datastore.Batch"
  langs:
  - "java"
  name: "add(FullEntity<?> entity)"
  nameWithType: "Batch.add(FullEntity<?> entity)"
  fullName: "com.google.cloud.datastore.Batch.add(FullEntity<?> entity)"
  overload: "com.google.cloud.datastore.Batch.add*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Datastore add operation: inserts the provided entity. This method will automatically allocate\n an id if necessary. If <code>entity</code> has a complete key and was already marked for deletion in this\n writer, the operation will be changed to <xref uid=\"com.google.cloud.datastore.Batch.put\" data-throw-if-not-resolved=\"false\">#put</xref>.\n\n <p>If an entity for <code>entity.getKey()</code> does not exists, <code>entity</code> is inserted.\n Otherwise, <xref uid=\"com.google.cloud.datastore.Batch.submit()\" data-throw-if-not-resolved=\"false\">#submit()</xref> will throw a <xref uid=\"com.google.datastore.v1.client.DatastoreException\" data-throw-if-not-resolved=\"false\">DatastoreException</xref> with <xref uid=\"com.google.datastore.v1.client.DatastoreException.getReason*\" data-throw-if-not-resolved=\"false\">DatastoreException#getReason()</xref> equal to <code>\"ALREADY_EXISTS\"</code>."
  syntax:
    content: "public abstract Entity add(FullEntity<?> entity)"
    parameters:
    - id: "entity"
      type: "com.google.cloud.datastore.FullEntity<?>"
    return:
      type: "com.google.cloud.datastore.Entity"
- uid: "com.google.cloud.datastore.Batch.add(com.google.cloud.datastore.FullEntity<?>...)"
  id: "add(com.google.cloud.datastore.FullEntity<?>...)"
  parent: "com.google.cloud.datastore.Batch"
  langs:
  - "java"
  name: "add(FullEntity<?>[] entities)"
  nameWithType: "Batch.add(FullEntity<?>[] entities)"
  fullName: "com.google.cloud.datastore.Batch.add(FullEntity<?>[] entities)"
  overload: "com.google.cloud.datastore.Batch.add*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Datastore add operation: inserts the provided entities. This method will automatically allocate\n id for any entity with an incomplete key. For entities with complete keys that were marked for deletion in this writer the\n operation will be changed to <xref uid=\"com.google.cloud.datastore.Batch.put\" data-throw-if-not-resolved=\"false\">#put</xref>.\n\n <p>If none of entities' keys exist, all entities are inserted. If any of entities' keys already\n exists, <xref uid=\"com.google.cloud.datastore.Batch.submit()\" data-throw-if-not-resolved=\"false\">#submit()</xref> will throw a <xref uid=\"com.google.datastore.v1.client.DatastoreException\" data-throw-if-not-resolved=\"false\">DatastoreException</xref> with <xref uid=\"com.google.datastore.v1.client.DatastoreException.getReason*\" data-throw-if-not-resolved=\"false\">DatastoreException#getReason()</xref> equal to <code>\"ALREADY_EXISTS\"</code>. All entities in <code>\n entities</code> whose key did not exist are inserted."
  syntax:
    content: "public abstract List<Entity> add(FullEntity<?>[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.FullEntity<?>[]"
    return:
      type: "java.util.List<com.google.cloud.datastore.Entity>"
- uid: "com.google.cloud.datastore.Batch.getDatastore()"
  id: "getDatastore()"
  parent: "com.google.cloud.datastore.Batch"
  langs:
  - "java"
  name: "getDatastore()"
  nameWithType: "Batch.getDatastore()"
  fullName: "com.google.cloud.datastore.Batch.getDatastore()"
  overload: "com.google.cloud.datastore.Batch.getDatastore*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns the batch associated <xref uid=\"com.google.cloud.datastore.Datastore\" data-throw-if-not-resolved=\"false\">Datastore</xref>."
  syntax:
    content: "public abstract Datastore getDatastore()"
    return:
      type: "com.google.cloud.datastore.Datastore"
- uid: "com.google.cloud.datastore.Batch.submit()"
  id: "submit()"
  parent: "com.google.cloud.datastore.Batch"
  langs:
  - "java"
  name: "submit()"
  nameWithType: "Batch.submit()"
  fullName: "com.google.cloud.datastore.Batch.submit()"
  overload: "com.google.cloud.datastore.Batch.submit*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Submit the batch to the Datastore."
  syntax:
    content: "public abstract Batch.Response submit()"
    return:
      type: "com.google.cloud.datastore.Batch.Response"
references:
- uid: "com.google.cloud.datastore.FullEntity<?>"
  spec.java:
  - uid: "com.google.cloud.datastore.FullEntity"
    name: "FullEntity"
    fullName: "com.google.cloud.datastore.FullEntity"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "?"
    name: "?"
    fullName: "?"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.Entity"
  name: "Entity"
  nameWithType: "Entity"
  fullName: "com.google.cloud.datastore.Entity"
- uid: "com.google.cloud.datastore.Batch.add*"
  name: "add"
  nameWithType: "Batch.add"
  fullName: "com.google.cloud.datastore.Batch.add"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.FullEntity<?>[]"
  spec.java:
  - uid: "com.google.cloud.datastore.FullEntity"
    name: "FullEntity"
    fullName: "com.google.cloud.datastore.FullEntity"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "?"
    name: "?"
    fullName: "?"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
  - name: "[]"
    fullName: "[]"
    isExternal: false
- uid: "java.util.List<com.google.cloud.datastore.Entity>"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/List<com/google/cloud/datastore/Entity>.html"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "com.google.cloud.datastore.Entity"
    name: "Entity"
    fullName: "com.google.cloud.datastore.Entity"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.Batch.Response"
  name: "Batch.Response"
  nameWithType: "Batch.Response"
  fullName: "com.google.cloud.datastore.Batch.Response"
- uid: "com.google.cloud.datastore.Batch.submit*"
  name: "submit"
  nameWithType: "Batch.submit"
  fullName: "com.google.cloud.datastore.Batch.submit"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Datastore"
  name: "Datastore"
  nameWithType: "Datastore"
  fullName: "com.google.cloud.datastore.Datastore"
- uid: "com.google.cloud.datastore.Batch.getDatastore*"
  name: "getDatastore"
  nameWithType: "Batch.getDatastore"
  fullName: "com.google.cloud.datastore.Batch.getDatastore"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.DatastoreBatchWriter"
  name: "DatastoreBatchWriter"
  nameWithType: "DatastoreBatchWriter"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter"
- uid: "com.google.cloud.datastore.FullEntity"
  name: "FullEntity"
  nameWithType: "FullEntity"
  fullName: "com.google.cloud.datastore.FullEntity"
- uid: "?"
  name: "?"
  nameWithType: "?"
  fullName: "?"
- uid: "?>[]"
  name: "?>[]"
  nameWithType: "?>[]"
  fullName: "?>[]"
- uid: "java.util.List"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
