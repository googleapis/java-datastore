### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.datastore.ValueBuilder"
  id: "ValueBuilder"
  parent: "com.google.cloud.datastore"
  children:
  - "com.google.cloud.datastore.ValueBuilder.build()"
  - "com.google.cloud.datastore.ValueBuilder.get()"
  - "com.google.cloud.datastore.ValueBuilder.getExcludeFromIndexes()"
  - "com.google.cloud.datastore.ValueBuilder.getMeaning()"
  - "com.google.cloud.datastore.ValueBuilder.getValueType()"
  - "com.google.cloud.datastore.ValueBuilder.mergeFrom(P)"
  - "com.google.cloud.datastore.ValueBuilder.set(V)"
  - "com.google.cloud.datastore.ValueBuilder.setExcludeFromIndexes(boolean)"
  - "com.google.cloud.datastore.ValueBuilder.setMeaning(int)"
  langs:
  - "java"
  name: "ValueBuilder<V,P,B>"
  nameWithType: "ValueBuilder<V,P,B>"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>"
  type: "Interface"
  package: "com.google.cloud.datastore"
  summary: "A common interface for Value builders."
  syntax:
    content: "public interface ValueBuilder<V,P,B>"
    typeParameters:
    - id: "V"
    - id: "P"
    - id: "B"
- uid: "com.google.cloud.datastore.ValueBuilder.build()"
  id: "build()"
  parent: "com.google.cloud.datastore.ValueBuilder"
  langs:
  - "java"
  name: "build()"
  nameWithType: "ValueBuilder<V,P,B>.build()"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.build()"
  overload: "com.google.cloud.datastore.ValueBuilder.build*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "public abstract P build()"
    return:
      type: "P"
- uid: "com.google.cloud.datastore.ValueBuilder.get()"
  id: "get()"
  parent: "com.google.cloud.datastore.ValueBuilder"
  langs:
  - "java"
  name: "get()"
  nameWithType: "ValueBuilder<V,P,B>.get()"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.get()"
  overload: "com.google.cloud.datastore.ValueBuilder.get*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "public abstract V get()"
    return:
      type: "V"
- uid: "com.google.cloud.datastore.ValueBuilder.getExcludeFromIndexes()"
  id: "getExcludeFromIndexes()"
  parent: "com.google.cloud.datastore.ValueBuilder"
  langs:
  - "java"
  name: "getExcludeFromIndexes()"
  nameWithType: "ValueBuilder<V,P,B>.getExcludeFromIndexes()"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.getExcludeFromIndexes()"
  overload: "com.google.cloud.datastore.ValueBuilder.getExcludeFromIndexes*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "public abstract boolean getExcludeFromIndexes()"
    return:
      type: "boolean"
- uid: "com.google.cloud.datastore.ValueBuilder.getMeaning()"
  id: "getMeaning()"
  parent: "com.google.cloud.datastore.ValueBuilder"
  langs:
  - "java"
  name: "getMeaning()"
  nameWithType: "ValueBuilder<V,P,B>.getMeaning()"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.getMeaning()"
  overload: "com.google.cloud.datastore.ValueBuilder.getMeaning*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Deprecated. This library preserves the field for backwards compatibility."
  syntax:
    content: "public abstract int getMeaning()"
    return:
      type: "int"
- uid: "com.google.cloud.datastore.ValueBuilder.getValueType()"
  id: "getValueType()"
  parent: "com.google.cloud.datastore.ValueBuilder"
  langs:
  - "java"
  name: "getValueType()"
  nameWithType: "ValueBuilder<V,P,B>.getValueType()"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.getValueType()"
  overload: "com.google.cloud.datastore.ValueBuilder.getValueType*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "public abstract ValueType getValueType()"
    return:
      type: "com.google.cloud.datastore.ValueType"
- uid: "com.google.cloud.datastore.ValueBuilder.mergeFrom(P)"
  id: "mergeFrom(P)"
  parent: "com.google.cloud.datastore.ValueBuilder"
  langs:
  - "java"
  name: "mergeFrom(P other)"
  nameWithType: "ValueBuilder<V,P,B>.mergeFrom(P other)"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.mergeFrom(P other)"
  overload: "com.google.cloud.datastore.ValueBuilder.mergeFrom*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "public abstract B mergeFrom(P other)"
    parameters:
    - id: "other"
      type: "P"
    return:
      type: "B"
- uid: "com.google.cloud.datastore.ValueBuilder.set(V)"
  id: "set(V)"
  parent: "com.google.cloud.datastore.ValueBuilder"
  langs:
  - "java"
  name: "set(V value)"
  nameWithType: "ValueBuilder<V,P,B>.set(V value)"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.set(V value)"
  overload: "com.google.cloud.datastore.ValueBuilder.set*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "public abstract B set(V value)"
    parameters:
    - id: "value"
      type: "V"
    return:
      type: "B"
- uid: "com.google.cloud.datastore.ValueBuilder.setExcludeFromIndexes(boolean)"
  id: "setExcludeFromIndexes(boolean)"
  parent: "com.google.cloud.datastore.ValueBuilder"
  langs:
  - "java"
  name: "setExcludeFromIndexes(boolean excludeFromIndexes)"
  nameWithType: "ValueBuilder<V,P,B>.setExcludeFromIndexes(boolean excludeFromIndexes)"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.setExcludeFromIndexes(boolean excludeFromIndexes)"
  overload: "com.google.cloud.datastore.ValueBuilder.setExcludeFromIndexes*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "public abstract B setExcludeFromIndexes(boolean excludeFromIndexes)"
    parameters:
    - id: "excludeFromIndexes"
      type: "boolean"
    return:
      type: "B"
- uid: "com.google.cloud.datastore.ValueBuilder.setMeaning(int)"
  id: "setMeaning(int)"
  parent: "com.google.cloud.datastore.ValueBuilder"
  langs:
  - "java"
  name: "setMeaning(int meaning)"
  nameWithType: "ValueBuilder<V,P,B>.setMeaning(int meaning)"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.setMeaning(int meaning)"
  overload: "com.google.cloud.datastore.ValueBuilder.setMeaning*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Deprecated. This library preserves the field for backwards compatibility."
  syntax:
    content: "public abstract B setMeaning(int meaning)"
    parameters:
    - id: "meaning"
      type: "int"
    return:
      type: "B"
references:
- uid: "com.google.cloud.datastore.ValueType"
  name: "ValueType"
  nameWithType: "ValueType"
  fullName: "com.google.cloud.datastore.ValueType"
- uid: "com.google.cloud.datastore.ValueBuilder.getValueType*"
  name: "getValueType"
  nameWithType: "ValueBuilder<V,P,B>.getValueType"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.getValueType"
  package: "com.google.cloud.datastore"
- uid: "P"
  spec.java:
  - uid: "P"
    name: "P"
    fullName: "P"
    isExternal: false
- uid: "B"
  spec.java:
  - uid: "B"
    name: "B"
    fullName: "B"
    isExternal: false
- uid: "com.google.cloud.datastore.ValueBuilder.mergeFrom*"
  name: "mergeFrom"
  nameWithType: "ValueBuilder<V,P,B>.mergeFrom"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.mergeFrom"
  package: "com.google.cloud.datastore"
- uid: "boolean"
  href: "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
    isExternal: false
- uid: "com.google.cloud.datastore.ValueBuilder.getExcludeFromIndexes*"
  name: "getExcludeFromIndexes"
  nameWithType: "ValueBuilder<V,P,B>.getExcludeFromIndexes"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.getExcludeFromIndexes"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.ValueBuilder.setExcludeFromIndexes*"
  name: "setExcludeFromIndexes"
  nameWithType: "ValueBuilder<V,P,B>.setExcludeFromIndexes"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.setExcludeFromIndexes"
  package: "com.google.cloud.datastore"
- uid: "int"
  href: "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
    isExternal: false
- uid: "com.google.cloud.datastore.ValueBuilder.getMeaning*"
  name: "getMeaning"
  nameWithType: "ValueBuilder<V,P,B>.getMeaning"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.getMeaning"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.ValueBuilder.setMeaning*"
  name: "setMeaning"
  nameWithType: "ValueBuilder<V,P,B>.setMeaning"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.setMeaning"
  package: "com.google.cloud.datastore"
- uid: "V"
  spec.java:
  - uid: "V"
    name: "V"
    fullName: "V"
    isExternal: false
- uid: "com.google.cloud.datastore.ValueBuilder.get*"
  name: "get"
  nameWithType: "ValueBuilder<V,P,B>.get"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.get"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.ValueBuilder.set*"
  name: "set"
  nameWithType: "ValueBuilder<V,P,B>.set"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.set"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.ValueBuilder.build*"
  name: "build"
  nameWithType: "ValueBuilder<V,P,B>.build"
  fullName: "com.google.cloud.datastore.ValueBuilder<V,P,B>.build"
  package: "com.google.cloud.datastore"
