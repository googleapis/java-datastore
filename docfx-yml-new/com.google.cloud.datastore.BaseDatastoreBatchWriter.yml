### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  id: "BaseDatastoreBatchWriter"
  parent: "com.google.cloud.datastore"
  children:
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.add(com.google.cloud.datastore.FullEntity<?>)"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.add(com.google.cloud.datastore.FullEntity<?>...)"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.addWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.deactivate()"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.delete(com.google.cloud.datastore.Key...)"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.getDatastore()"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.getName()"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.isActive()"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.newInvalidRequest(java.lang.String,java.lang.Object...)"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.put(com.google.cloud.datastore.FullEntity<?>)"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.put(com.google.cloud.datastore.FullEntity<?>...)"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.putWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.toAdd()"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.toAddAutoId()"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.toDelete()"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.toMutationPbList()"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.toPut()"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.toUpdate()"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.update(com.google.cloud.datastore.Entity...)"
  - "com.google.cloud.datastore.BaseDatastoreBatchWriter.validateActive()"
  langs:
  - "java"
  name: "BaseDatastoreBatchWriter"
  nameWithType: "BaseDatastoreBatchWriter"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  type: "Class"
  package: "com.google.cloud.datastore"
  summary: "Base class for DatastoreBatchWriter."
  syntax:
    content: "public abstract class BaseDatastoreBatchWriter implements DatastoreBatchWriter"
  inheritance:
  - "java.lang.Object"
  implements:
  - "com.google.cloud.datastore.DatastoreBatchWriter"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.BaseDatastoreBatchWriter(java.lang.String)"
  id: "BaseDatastoreBatchWriter(java.lang.String)"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "BaseDatastoreBatchWriter(String name)"
  nameWithType: "BaseDatastoreBatchWriter.BaseDatastoreBatchWriter(String name)"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.BaseDatastoreBatchWriter(String name)"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.BaseDatastoreBatchWriter*"
  type: "Constructor"
  package: "com.google.cloud.datastore"
  syntax:
    content: " BaseDatastoreBatchWriter(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.add(com.google.cloud.datastore.FullEntity<?>)"
  id: "add(com.google.cloud.datastore.FullEntity<?>)"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "add(FullEntity<?> entity)"
  nameWithType: "BaseDatastoreBatchWriter.add(FullEntity<?> entity)"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.add(FullEntity<?> entity)"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.add*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Datastore add operation: inserts the provided entity. This method will automatically allocate\n an id if necessary. If <code>entity</code> has a complete key and was already marked for deletion in this\n writer, the operation will be changed to <xref uid=\"com.google.cloud.datastore.BaseDatastoreBatchWriter.put*\" data-throw-if-not-resolved=\"false\">#put</xref>."
  syntax:
    content: "public final Entity add(FullEntity<?> entity)"
    parameters:
    - id: "entity"
      type: "com.google.cloud.datastore.FullEntity<?>"
    return:
      type: "com.google.cloud.datastore.Entity"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.add(com.google.cloud.datastore.FullEntity<?>...)"
  id: "add(com.google.cloud.datastore.FullEntity<?>...)"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "add(FullEntity<?>[] entities)"
  nameWithType: "BaseDatastoreBatchWriter.add(FullEntity<?>[] entities)"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.add(FullEntity<?>[] entities)"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.add*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Datastore add operation: inserts the provided entities. This method will automatically allocate\n id for any entity with an incomplete key. For entities with complete keys that were marked for deletion in this writer the\n operation will be changed to <xref uid=\"com.google.cloud.datastore.BaseDatastoreBatchWriter.put*\" data-throw-if-not-resolved=\"false\">#put</xref>."
  syntax:
    content: "public final List<Entity> add(FullEntity<?>[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.FullEntity<?>[]"
    return:
      type: "java.util.List<com.google.cloud.datastore.Entity>"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.addWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  id: "addWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "addWithDeferredIdAllocation(FullEntity<?>[] entities)"
  nameWithType: "BaseDatastoreBatchWriter.addWithDeferredIdAllocation(FullEntity<?>[] entities)"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.addWithDeferredIdAllocation(FullEntity<?>[] entities)"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.addWithDeferredIdAllocation*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Datastore add operation. This method will also allocate id for any entity with an incomplete\n key. As opposed to <xref uid=\"com.google.cloud.datastore.BaseDatastoreBatchWriter.add(com.google.cloud.datastore.FullEntity<?>)\" data-throw-if-not-resolved=\"false\">#add(FullEntity)</xref> and <xref uid=\"com.google.cloud.datastore.BaseDatastoreBatchWriter.add*\" data-throw-if-not-resolved=\"false\">#add(FullEntity...)</xref>, this method will\n defer any necessary id allocation to submit time."
  syntax:
    content: "public final void addWithDeferredIdAllocation(FullEntity<?>[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.FullEntity<?>[]"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.deactivate()"
  id: "deactivate()"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "deactivate()"
  nameWithType: "BaseDatastoreBatchWriter.deactivate()"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.deactivate()"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.deactivate*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "protected void deactivate()"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.delete(com.google.cloud.datastore.Key...)"
  id: "delete(com.google.cloud.datastore.Key...)"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "delete(Key[] keys)"
  nameWithType: "BaseDatastoreBatchWriter.delete(Key[] keys)"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.delete(Key[] keys)"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.delete*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "A datastore delete operation. It is OK to request the deletion of a non-existing key. This operation will also remove from this batch any prior writes for entities\n with the same keys."
  syntax:
    content: "public final void delete(Key[] keys)"
    parameters:
    - id: "keys"
      type: "com.google.cloud.datastore.Key[]"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.getDatastore()"
  id: "getDatastore()"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "getDatastore()"
  nameWithType: "BaseDatastoreBatchWriter.getDatastore()"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.getDatastore()"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.getDatastore*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "protected abstract Datastore getDatastore()"
    return:
      type: "com.google.cloud.datastore.Datastore"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.getName()"
  id: "getName()"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "getName()"
  nameWithType: "BaseDatastoreBatchWriter.getName()"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.getName()"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.getName*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "protected String getName()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.isActive()"
  id: "isActive()"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "isActive()"
  nameWithType: "BaseDatastoreBatchWriter.isActive()"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.isActive()"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.isActive*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns <code>true</code> if still active (write operations were not sent to the Datastore)."
  syntax:
    content: "public boolean isActive()"
    return:
      type: "boolean"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.newInvalidRequest(java.lang.String,java.lang.Object...)"
  id: "newInvalidRequest(java.lang.String,java.lang.Object...)"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "newInvalidRequest(String msg, Object[] params)"
  nameWithType: "BaseDatastoreBatchWriter.newInvalidRequest(String msg, Object[] params)"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.newInvalidRequest(String msg, Object[] params)"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.newInvalidRequest*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "protected DatastoreException newInvalidRequest(String msg, Object[] params)"
    parameters:
    - id: "msg"
      type: "java.lang.String"
    - id: "params"
      type: "java.lang.Object[]"
    return:
      type: "com.google.cloud.datastore.DatastoreException"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.put(com.google.cloud.datastore.FullEntity<?>)"
  id: "put(com.google.cloud.datastore.FullEntity<?>)"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "put(FullEntity<?> entity)"
  nameWithType: "BaseDatastoreBatchWriter.put(FullEntity<?> entity)"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.put(FullEntity<?> entity)"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.put*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "A Datastore put (a.k.a upsert) operation: inserts an entity if it does not exist, updates it\n otherwise. This method will automatically allocate an id if necessary. This operation will also remove from this writer any prior writes for the same\n entity."
  syntax:
    content: "public final Entity put(FullEntity<?> entity)"
    parameters:
    - id: "entity"
      type: "com.google.cloud.datastore.FullEntity<?>"
    return:
      type: "com.google.cloud.datastore.Entity"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.put(com.google.cloud.datastore.FullEntity<?>...)"
  id: "put(com.google.cloud.datastore.FullEntity<?>...)"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "put(FullEntity<?>[] entities)"
  nameWithType: "BaseDatastoreBatchWriter.put(FullEntity<?>[] entities)"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.put(FullEntity<?>[] entities)"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.put*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "A Datastore put (a.k.a upsert) operation: creates an entity if it does not exist, updates it\n otherwise. This method will automatically allocate id for any entity with an incomplete key. This operation will also remove from this writer any prior writes for the same\n entities."
  syntax:
    content: "public final List<Entity> put(FullEntity<?>[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.FullEntity<?>[]"
    return:
      type: "java.util.List<com.google.cloud.datastore.Entity>"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.putWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  id: "putWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "putWithDeferredIdAllocation(FullEntity<?>[] entities)"
  nameWithType: "BaseDatastoreBatchWriter.putWithDeferredIdAllocation(FullEntity<?>[] entities)"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.putWithDeferredIdAllocation(FullEntity<?>[] entities)"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.putWithDeferredIdAllocation*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Datastore put operation. This method will also allocate id for any entity with an incomplete\n key. As opposed to <xref uid=\"com.google.cloud.datastore.BaseDatastoreBatchWriter.put(com.google.cloud.datastore.FullEntity<?>)\" data-throw-if-not-resolved=\"false\">#put(FullEntity)</xref> and <xref uid=\"com.google.cloud.datastore.BaseDatastoreBatchWriter.put*\" data-throw-if-not-resolved=\"false\">#put(FullEntity...)</xref>, this method will\n defer any necessary id allocation to submit time."
  syntax:
    content: "public final void putWithDeferredIdAllocation(FullEntity<?>[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.FullEntity<?>[]"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toAdd()"
  id: "toAdd()"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "toAdd()"
  nameWithType: "BaseDatastoreBatchWriter.toAdd()"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toAdd()"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toAdd*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "protected Map<Key,FullEntity<Key>> toAdd()"
    return:
      type: "java.util.Map<com.google.cloud.datastore.Key,com.google.cloud.datastore.FullEntity<com.google.cloud.datastore.Key>>"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toAddAutoId()"
  id: "toAddAutoId()"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "toAddAutoId()"
  nameWithType: "BaseDatastoreBatchWriter.toAddAutoId()"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toAddAutoId()"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toAddAutoId*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "protected List<FullEntity<IncompleteKey>> toAddAutoId()"
    return:
      type: "java.util.List<com.google.cloud.datastore.FullEntity<com.google.cloud.datastore.IncompleteKey>>"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toDelete()"
  id: "toDelete()"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "toDelete()"
  nameWithType: "BaseDatastoreBatchWriter.toDelete()"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toDelete()"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toDelete*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "protected Set<Key> toDelete()"
    return:
      type: "java.util.Set<com.google.cloud.datastore.Key>"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toMutationPbList()"
  id: "toMutationPbList()"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "toMutationPbList()"
  nameWithType: "BaseDatastoreBatchWriter.toMutationPbList()"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toMutationPbList()"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toMutationPbList*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "protected List<Mutation> toMutationPbList()"
    return:
      type: "java.util.List<com.google.datastore.v1.Mutation>"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toPut()"
  id: "toPut()"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "toPut()"
  nameWithType: "BaseDatastoreBatchWriter.toPut()"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toPut()"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toPut*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "protected Map<Key,FullEntity<Key>> toPut()"
    return:
      type: "java.util.Map<com.google.cloud.datastore.Key,com.google.cloud.datastore.FullEntity<com.google.cloud.datastore.Key>>"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toUpdate()"
  id: "toUpdate()"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "toUpdate()"
  nameWithType: "BaseDatastoreBatchWriter.toUpdate()"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toUpdate()"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toUpdate*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "protected Map<Key,FullEntity<Key>> toUpdate()"
    return:
      type: "java.util.Map<com.google.cloud.datastore.Key,com.google.cloud.datastore.FullEntity<com.google.cloud.datastore.Key>>"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.update(com.google.cloud.datastore.Entity...)"
  id: "update(com.google.cloud.datastore.Entity...)"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "update(Entity[] entities)"
  nameWithType: "BaseDatastoreBatchWriter.update(Entity[] entities)"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.update(Entity[] entities)"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.update*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "A Datastore update operation. The operation will fail if an entity with the same key does not\n already exist. This operation will be converted to <xref uid=\"com.google.cloud.datastore.BaseDatastoreBatchWriter.put*\" data-throw-if-not-resolved=\"false\">#put</xref> operation for entities that were\n already added or put in this writer."
  syntax:
    content: "public final void update(Entity[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.Entity[]"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.validateActive()"
  id: "validateActive()"
  parent: "com.google.cloud.datastore.BaseDatastoreBatchWriter"
  langs:
  - "java"
  name: "validateActive()"
  nameWithType: "BaseDatastoreBatchWriter.validateActive()"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.validateActive()"
  overload: "com.google.cloud.datastore.BaseDatastoreBatchWriter.validateActive*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "protected void validateActive()"
references:
- uid: "java.lang.String"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.BaseDatastoreBatchWriter*"
  name: "BaseDatastoreBatchWriter"
  nameWithType: "BaseDatastoreBatchWriter.BaseDatastoreBatchWriter"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.BaseDatastoreBatchWriter"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.FullEntity<?>[]"
  spec.java:
  - uid: "com.google.cloud.datastore.FullEntity"
    name: "FullEntity"
    fullName: "com.google.cloud.datastore.FullEntity"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "?"
    name: "?"
    fullName: "?"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
  - name: "[]"
    fullName: "[]"
    isExternal: false
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.addWithDeferredIdAllocation*"
  name: "addWithDeferredIdAllocation"
  nameWithType: "BaseDatastoreBatchWriter.addWithDeferredIdAllocation"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.addWithDeferredIdAllocation"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.FullEntity<?>"
  spec.java:
  - uid: "com.google.cloud.datastore.FullEntity"
    name: "FullEntity"
    fullName: "com.google.cloud.datastore.FullEntity"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "?"
    name: "?"
    fullName: "?"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.Entity"
  name: "Entity"
  nameWithType: "Entity"
  fullName: "com.google.cloud.datastore.Entity"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.add*"
  name: "add"
  nameWithType: "BaseDatastoreBatchWriter.add"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.add"
  package: "com.google.cloud.datastore"
- uid: "java.util.List<com.google.cloud.datastore.Entity>"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/List<com/google/cloud/datastore/Entity>.html"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "com.google.cloud.datastore.Entity"
    name: "Entity"
    fullName: "com.google.cloud.datastore.Entity"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.Entity[]"
  spec.java:
  - uid: "com.google.cloud.datastore.Entity"
    name: "Entity"
    fullName: "com.google.cloud.datastore.Entity"
    isExternal: false
  - name: "[]"
    fullName: "[]"
    isExternal: false
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.update*"
  name: "update"
  nameWithType: "BaseDatastoreBatchWriter.update"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.update"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.put*"
  name: "put"
  nameWithType: "BaseDatastoreBatchWriter.put"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.put"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.putWithDeferredIdAllocation*"
  name: "putWithDeferredIdAllocation"
  nameWithType: "BaseDatastoreBatchWriter.putWithDeferredIdAllocation"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.putWithDeferredIdAllocation"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Key[]"
  spec.java:
  - uid: "com.google.cloud.datastore.Key"
    name: "Key"
    fullName: "com.google.cloud.datastore.Key"
    isExternal: false
  - name: "[]"
    fullName: "[]"
    isExternal: false
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.delete*"
  name: "delete"
  nameWithType: "BaseDatastoreBatchWriter.delete"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.delete"
  package: "com.google.cloud.datastore"
- uid: "boolean"
  href: "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
    isExternal: false
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.isActive*"
  name: "isActive"
  nameWithType: "BaseDatastoreBatchWriter.isActive"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.isActive"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.getName*"
  name: "getName"
  nameWithType: "BaseDatastoreBatchWriter.getName"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.getName"
  package: "com.google.cloud.datastore"
- uid: "java.util.Map<com.google.cloud.datastore.Key,com.google.cloud.datastore.FullEntity<com.google.cloud.datastore.Key>>"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/Map<com/google/cloud/datastore/Key,com/google/cloud/datastore/FullEntity<com/google/cloud/datastore/Key>>.html"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/util/Map.html"
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "com.google.cloud.datastore.Key"
    name: "Key"
    fullName: "com.google.cloud.datastore.Key"
    isExternal: false
  - name: ","
    fullName: ","
    isExternal: false
  - uid: "com.google.cloud.datastore.FullEntity"
    name: "FullEntity"
    fullName: "com.google.cloud.datastore.FullEntity"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "com.google.cloud.datastore.Key"
    name: "Key"
    fullName: "com.google.cloud.datastore.Key"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toAdd*"
  name: "toAdd"
  nameWithType: "BaseDatastoreBatchWriter.toAdd"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toAdd"
  package: "com.google.cloud.datastore"
- uid: "java.util.List<com.google.cloud.datastore.FullEntity<com.google.cloud.datastore.IncompleteKey>>"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/List<com/google/cloud/datastore/FullEntity<com/google/cloud/datastore/IncompleteKey>>.html"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "com.google.cloud.datastore.FullEntity"
    name: "FullEntity"
    fullName: "com.google.cloud.datastore.FullEntity"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "com.google.cloud.datastore.IncompleteKey"
    name: "IncompleteKey"
    fullName: "com.google.cloud.datastore.IncompleteKey"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toAddAutoId*"
  name: "toAddAutoId"
  nameWithType: "BaseDatastoreBatchWriter.toAddAutoId"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toAddAutoId"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toUpdate*"
  name: "toUpdate"
  nameWithType: "BaseDatastoreBatchWriter.toUpdate"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toUpdate"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toPut*"
  name: "toPut"
  nameWithType: "BaseDatastoreBatchWriter.toPut"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toPut"
  package: "com.google.cloud.datastore"
- uid: "java.util.Set<com.google.cloud.datastore.Key>"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/Set<com/google/cloud/datastore/Key>.html"
  spec.java:
  - uid: "java.util.Set"
    name: "Set"
    fullName: "java.util.Set"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/util/Set.html"
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "com.google.cloud.datastore.Key"
    name: "Key"
    fullName: "com.google.cloud.datastore.Key"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toDelete*"
  name: "toDelete"
  nameWithType: "BaseDatastoreBatchWriter.toDelete"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toDelete"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.deactivate*"
  name: "deactivate"
  nameWithType: "BaseDatastoreBatchWriter.deactivate"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.deactivate"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.validateActive*"
  name: "validateActive"
  nameWithType: "BaseDatastoreBatchWriter.validateActive"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.validateActive"
  package: "com.google.cloud.datastore"
- uid: "java.lang.Object[]"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object[].html"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html"
  - name: "[]"
    fullName: "[]"
    isExternal: false
- uid: "com.google.cloud.datastore.DatastoreException"
  name: "DatastoreException"
  nameWithType: "DatastoreException"
  fullName: "com.google.cloud.datastore.DatastoreException"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.newInvalidRequest*"
  name: "newInvalidRequest"
  nameWithType: "BaseDatastoreBatchWriter.newInvalidRequest"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.newInvalidRequest"
  package: "com.google.cloud.datastore"
- uid: "java.util.List<com.google.datastore.v1.Mutation>"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/List<com/google/datastore/v1/Mutation>.html"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "com.google.datastore.v1.Mutation"
    name: "Mutation"
    fullName: "com.google.datastore.v1.Mutation"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toMutationPbList*"
  name: "toMutationPbList"
  nameWithType: "BaseDatastoreBatchWriter.toMutationPbList"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.toMutationPbList"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Datastore"
  name: "Datastore"
  nameWithType: "Datastore"
  fullName: "com.google.cloud.datastore.Datastore"
- uid: "com.google.cloud.datastore.BaseDatastoreBatchWriter.getDatastore*"
  name: "getDatastore"
  nameWithType: "BaseDatastoreBatchWriter.getDatastore"
  fullName: "com.google.cloud.datastore.BaseDatastoreBatchWriter.getDatastore"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.DatastoreBatchWriter"
  name: "DatastoreBatchWriter"
  nameWithType: "DatastoreBatchWriter"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter"
- uid: "java.lang.Object.notify()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.google.cloud.datastore.FullEntity"
  name: "FullEntity"
  nameWithType: "FullEntity"
  fullName: "com.google.cloud.datastore.FullEntity"
- uid: "?>[]"
  name: "?>[]"
  nameWithType: "?>[]"
  fullName: "?>[]"
- uid: "?"
  name: "?"
  nameWithType: "?"
  fullName: "?"
- uid: "java.util.List"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.google.cloud.datastore.Key,com.google.cloud.datastore.FullEntity"
  name: "Key,FullEntity"
  nameWithType: "Key,FullEntity"
  fullName: "com.google.cloud.datastore.Key,com.google.cloud.datastore.FullEntity"
- uid: "com.google.cloud.datastore.Key"
  name: "Key"
  nameWithType: "Key"
  fullName: "com.google.cloud.datastore.Key"
- uid: "java.util.Map"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/Map.html"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "com.google.cloud.datastore.IncompleteKey"
  name: "IncompleteKey"
  nameWithType: "IncompleteKey"
  fullName: "com.google.cloud.datastore.IncompleteKey"
- uid: "java.util.Set"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/Set.html"
  name: "Set"
  nameWithType: "Set"
  fullName: "java.util.Set"
- uid: "com.google.datastore.v1.Mutation"
  name: "Mutation"
  nameWithType: "Mutation"
  fullName: "com.google.datastore.v1.Mutation"
