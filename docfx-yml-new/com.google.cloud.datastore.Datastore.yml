### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.datastore.Datastore"
  id: "Datastore"
  parent: "com.google.cloud.datastore"
  children:
  - "com.google.cloud.datastore.Datastore.<T>run(com.google.cloud.datastore.Query<T>,com.google.cloud.datastore.ReadOption...)"
  - "com.google.cloud.datastore.Datastore.<T>runInTransaction(com.google.cloud.datastore.Datastore.TransactionCallable<T>)"
  - "com.google.cloud.datastore.Datastore.<T>runInTransaction(com.google.cloud.datastore.Datastore.TransactionCallable<T>,com.google.datastore.v1.TransactionOptions)"
  - "com.google.cloud.datastore.Datastore.TransactionCallable"
  - "com.google.cloud.datastore.Datastore.add(com.google.cloud.datastore.FullEntity<?>)"
  - "com.google.cloud.datastore.Datastore.add(com.google.cloud.datastore.FullEntity<?>...)"
  - "com.google.cloud.datastore.Datastore.allocateId(com.google.cloud.datastore.IncompleteKey)"
  - "com.google.cloud.datastore.Datastore.allocateId(com.google.cloud.datastore.IncompleteKey...)"
  - "com.google.cloud.datastore.Datastore.delete(com.google.cloud.datastore.Key...)"
  - "com.google.cloud.datastore.Datastore.fetch(java.lang.Iterable<com.google.cloud.datastore.Key>,com.google.cloud.datastore.ReadOption...)"
  - "com.google.cloud.datastore.Datastore.get(com.google.cloud.datastore.Key,com.google.cloud.datastore.ReadOption...)"
  - "com.google.cloud.datastore.Datastore.get(java.lang.Iterable<com.google.cloud.datastore.Key>,com.google.cloud.datastore.ReadOption...)"
  - "com.google.cloud.datastore.Datastore.newBatch()"
  - "com.google.cloud.datastore.Datastore.newKeyFactory()"
  - "com.google.cloud.datastore.Datastore.newTransaction()"
  - "com.google.cloud.datastore.Datastore.newTransaction(com.google.datastore.v1.TransactionOptions)"
  - "com.google.cloud.datastore.Datastore.put(com.google.cloud.datastore.FullEntity<?>)"
  - "com.google.cloud.datastore.Datastore.put(com.google.cloud.datastore.FullEntity<?>...)"
  - "com.google.cloud.datastore.Datastore.reserveIds(com.google.cloud.datastore.Key...)"
  - "com.google.cloud.datastore.Datastore.runAggregation(com.google.cloud.datastore.AggregationQuery,com.google.cloud.datastore.ReadOption...)"
  - "com.google.cloud.datastore.Datastore.update(com.google.cloud.datastore.Entity...)"
  langs:
  - "java"
  name: "Datastore"
  nameWithType: "Datastore"
  fullName: "com.google.cloud.datastore.Datastore"
  type: "Interface"
  package: "com.google.cloud.datastore"
  summary: "An interface for Google Cloud Datastore."
  syntax:
    content: "public interface Datastore extends Service<DatastoreOptions>, DatastoreReaderWriter"
  implements:
  - "com.google.cloud.Service<com.google.cloud.datastore.DatastoreOptions>"
  - "com.google.cloud.datastore.DatastoreReaderWriter"
- uid: "com.google.cloud.datastore.Datastore.<T>run(com.google.cloud.datastore.Query<T>,com.google.cloud.datastore.ReadOption...)"
  id: "<T>run(com.google.cloud.datastore.Query<T>,com.google.cloud.datastore.ReadOption...)"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "<T>run(Query<T> query, ReadOption[] options)"
  nameWithType: "Datastore.<T>run(Query<T> query, ReadOption[] options)"
  fullName: "com.google.cloud.datastore.Datastore.<T>run(Query<T> query, ReadOption[] options)"
  overload: "com.google.cloud.datastore.Datastore.run*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Submits a <xref uid=\"com.google.cloud.datastore.Query\" data-throw-if-not-resolved=\"false\">Query</xref> and returns its result. <xref uid=\"com.google.cloud.datastore.ReadOption\" data-throw-if-not-resolved=\"false\">ReadOption</xref>s can be specified if\n desired.\n\n <p>Example of running a query to find all entities of one kind.\n\n <pre class=\"prettyprint lang-java\"><code>\n String kind = \"my_kind\";\n StructuredQuery&lt;Entity&gt; query = Query.newEntityQueryBuilder()\n     .setKind(kind)\n     .build();\n QueryResults&lt;Entity&gt; results = datastore.run(query);\n List&lt;Entity&gt; entities = Lists.newArrayList();\n while (results.hasNext()) {\n   Entity result = results.next();\n   // do something with result\n   entities.add(result);\n }\n </code></pre>\n\n <p>Example of running a query to find all entities with a matching property value.\n\n <pre class=\"prettyprint lang-java\"><code>\n String kind = \"my_kind\";\n String property = \"my_property\";\n String value = \"my_value\";\n StructuredQuery&lt;Entity&gt; query = Query.newEntityQueryBuilder()\n     .setKind(kind)\n     .setFilter(PropertyFilter.eq(property, value))\n     .build();\n QueryResults&lt;Entity&gt; results = datastore.run(query);\n List&lt;Entity&gt; entities = Lists.newArrayList();\n while (results.hasNext()) {\n   Entity result = results.next();\n   // do something with result\n   entities.add(result);\n }\n </code></pre>"
  syntax:
    content: "public abstract QueryResults<T> <T>run(Query<T> query, ReadOption[] options)"
    parameters:
    - id: "query"
      type: "com.google.cloud.datastore.Query<T>"
    - id: "options"
      type: "com.google.cloud.datastore.ReadOption[]"
    return:
      type: "com.google.cloud.datastore.QueryResults<T>"
- uid: "com.google.cloud.datastore.Datastore.<T>runInTransaction(com.google.cloud.datastore.Datastore.TransactionCallable<T>)"
  id: "<T>runInTransaction(com.google.cloud.datastore.Datastore.TransactionCallable<T>)"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "<T>runInTransaction(Datastore.TransactionCallable<T> callable)"
  nameWithType: "Datastore.<T>runInTransaction(Datastore.TransactionCallable<T> callable)"
  fullName: "com.google.cloud.datastore.Datastore.<T>runInTransaction(Datastore.TransactionCallable<T> callable)"
  overload: "com.google.cloud.datastore.Datastore.runInTransaction*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Invokes the callback's <xref uid=\"com.google.cloud.datastore.Datastore.TransactionCallable.run\" data-throw-if-not-resolved=\"false\">Datastore.TransactionCallable#run</xref> method with a <xref uid=\"com.google.cloud.datastore.DatastoreReaderWriter\" data-throw-if-not-resolved=\"false\">DatastoreReaderWriter</xref> that is associated with a new transaction. The transaction will be\n committed upon successful invocation. Any thrown exception will cause the transaction to\n rollback and will be propagated as a <xref uid=\"com.google.datastore.v1.client.DatastoreException\" data-throw-if-not-resolved=\"false\">DatastoreException</xref> with the original exception as\n its root cause.\n\n <p>Example of running in a transaction.\n\n <pre class=\"prettyprint lang-java\"><code>\n String callableResult = \"my_callable_result\";\n TransactionCallable&lt;String&gt; callable = new TransactionCallable&lt;String&gt;() {\n   public String run(DatastoreReaderWriter readerWriter) {\n     // use readerWriter to run in transaction\n     return callableResult;\n   }\n };\n String result = datastore.runInTransaction(callable);\n </code></pre>"
  syntax:
    content: "public abstract T <T>runInTransaction(Datastore.TransactionCallable<T> callable)"
    parameters:
    - id: "callable"
      type: "com.google.cloud.datastore.Datastore.TransactionCallable<T>"
      description: "the callback to call with a newly created transactional readerWriter"
    return:
      type: "T"
- uid: "com.google.cloud.datastore.Datastore.<T>runInTransaction(com.google.cloud.datastore.Datastore.TransactionCallable<T>,com.google.datastore.v1.TransactionOptions)"
  id: "<T>runInTransaction(com.google.cloud.datastore.Datastore.TransactionCallable<T>,com.google.datastore.v1.TransactionOptions)"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "<T>runInTransaction(Datastore.TransactionCallable<T> callable, TransactionOptions options)"
  nameWithType: "Datastore.<T>runInTransaction(Datastore.TransactionCallable<T> callable, TransactionOptions options)"
  fullName: "com.google.cloud.datastore.Datastore.<T>runInTransaction(Datastore.TransactionCallable<T> callable, TransactionOptions options)"
  overload: "com.google.cloud.datastore.Datastore.runInTransaction*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Invokes the callback's <xref uid=\"com.google.cloud.datastore.Datastore.TransactionCallable.run\" data-throw-if-not-resolved=\"false\">Datastore.TransactionCallable#run</xref> method with a <xref uid=\"com.google.cloud.datastore.DatastoreReaderWriter\" data-throw-if-not-resolved=\"false\">DatastoreReaderWriter</xref> that is associated with a new transaction. The transaction will be\n committed upon successful invocation. Any thrown exception will cause the transaction to\n rollback and will be propagated as a <xref uid=\"com.google.datastore.v1.client.DatastoreException\" data-throw-if-not-resolved=\"false\">DatastoreException</xref> with the original exception as\n its root cause. If <xref uid=\"com.google.datastore.v1.TransactionOptions\" data-throw-if-not-resolved=\"false\">TransactionOptions</xref> is set to read-write mode, previous transaction\n Id in the options will be automatically populated each time a transaction is retried.\n\n <p>Example of running in a transaction.\n\n <pre class=\"prettyprint lang-java\"><code>\n String callableResult = \"my_callable_result\";\n TransactionCallable&lt;String&gt; callable = new TransactionCallable&lt;String&gt;() {\n   public String run(DatastoreReaderWriter readerWriter) {\n     // use readerWriter to run in transaction\n     return callableResult;\n   }\n };\n\n TransactionOptions options = TransactionOptions.newBuilder()\n     .setReadWrite(TransactionOptions.ReadWrite\n         .getDefaultInstance())\n     .build();\n\n String result = datastore.runInTransaction(callable, options);\n </code></pre>"
  syntax:
    content: "public abstract T <T>runInTransaction(Datastore.TransactionCallable<T> callable, TransactionOptions options)"
    parameters:
    - id: "callable"
      type: "com.google.cloud.datastore.Datastore.TransactionCallable<T>"
      description: "the callback to call with a newly created transactional readerWriter"
    - id: "options"
      type: "com.google.datastore.v1.TransactionOptions"
      description: "the Transaction options indicating whether the transaction mode is Read-only or\n     Read-Write"
    return:
      type: "T"
- uid: "com.google.cloud.datastore.Datastore.add(com.google.cloud.datastore.FullEntity<?>)"
  id: "add(com.google.cloud.datastore.FullEntity<?>)"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "add(FullEntity<?> entity)"
  nameWithType: "Datastore.add(FullEntity<?> entity)"
  fullName: "com.google.cloud.datastore.Datastore.add(FullEntity<?> entity)"
  overload: "com.google.cloud.datastore.Datastore.add*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Datastore add operation: inserts the provided entity. This method will automatically allocate\n an id if necessary.\n\n <p>If an entity for <code>entity.getKey()</code> does not exist, <code>entity</code> is inserted.\n Otherwise, a <xref uid=\"com.google.datastore.v1.client.DatastoreException\" data-throw-if-not-resolved=\"false\">DatastoreException</xref> is thrown with <xref uid=\"com.google.datastore.v1.client.DatastoreException.getReason*\" data-throw-if-not-resolved=\"false\">DatastoreException#getReason()</xref>\n equal to <code>\"ALREADY_EXISTS\"</code>.\n\n <p>Example of adding a single entity.\n\n <pre class=\"prettyprint lang-java\"><code>\n String keyName = \"my_key_name\";\n Key key = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName);\n Entity.Builder entityBuilder = Entity.newBuilder(key);\n entityBuilder.set(\"propertyName\", \"value\");\n Entity entity = entityBuilder.build();\n try {\n   datastore.add(entity);\n } catch (DatastoreException ex) {\n   if (\"ALREADY_EXISTS\".equals(ex.getReason())) {\n     // entity.getKey() already exists\n   }\n }\n </code></pre>"
  syntax:
    content: "public abstract Entity add(FullEntity<?> entity)"
    parameters:
    - id: "entity"
      type: "com.google.cloud.datastore.FullEntity<?>"
    return:
      type: "com.google.cloud.datastore.Entity"
- uid: "com.google.cloud.datastore.Datastore.add(com.google.cloud.datastore.FullEntity<?>...)"
  id: "add(com.google.cloud.datastore.FullEntity<?>...)"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "add(FullEntity<?>[] entities)"
  nameWithType: "Datastore.add(FullEntity<?>[] entities)"
  fullName: "com.google.cloud.datastore.Datastore.add(FullEntity<?>[] entities)"
  overload: "com.google.cloud.datastore.Datastore.add*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Datastore add operation: inserts the provided entities. This method will automatically allocate\n id for any entity with an incomplete key.\n\n <p>If none of entities' keys exist, all entities are inserted. If any of entities' keys already\n exists the method throws a <xref uid=\"com.google.datastore.v1.client.DatastoreException\" data-throw-if-not-resolved=\"false\">DatastoreException</xref> with <xref uid=\"com.google.datastore.v1.client.DatastoreException.getReason*\" data-throw-if-not-resolved=\"false\">DatastoreException#getReason()</xref> equal to <code>\"ALREADY_EXISTS\"</code>. All entities in <code>\n entities</code> whose key did not exist are inserted. To achieve a transactional behavior, use <xref uid=\"com.google.cloud.datastore.Transaction\" data-throw-if-not-resolved=\"false\">Transaction</xref>.\n\n <p>Example of adding multiple entities.\n\n <pre class=\"prettyprint lang-java\"><code>\n String keyName1 = \"my_key_name1\";\n String keyName2 = \"my_key_name2\";\n Key key1 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName1);\n Entity.Builder entityBuilder1 = Entity.newBuilder(key1);\n entityBuilder1.set(\"propertyName\", \"value1\");\n Entity entity1 = entityBuilder1.build();\n\n Key key2 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName2);\n Entity.Builder entityBuilder2 = Entity.newBuilder(key2);\n entityBuilder2.set(\"propertyName\", \"value2\");\n Entity entity2 = entityBuilder2.build();\n\n try {\n   datastore.add(entity1, entity2);\n } catch (DatastoreException ex) {\n   if (\"ALREADY_EXISTS\".equals(ex.getReason())) {\n     // at least one of entity1.getKey() and entity2.getKey() already exists\n   }\n }\n </code></pre>"
  syntax:
    content: "public abstract List<Entity> add(FullEntity<?>[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.FullEntity<?>[]"
    return:
      type: "java.util.List<com.google.cloud.datastore.Entity>"
- uid: "com.google.cloud.datastore.Datastore.allocateId(com.google.cloud.datastore.IncompleteKey)"
  id: "allocateId(com.google.cloud.datastore.IncompleteKey)"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "allocateId(IncompleteKey key)"
  nameWithType: "Datastore.allocateId(IncompleteKey key)"
  fullName: "com.google.cloud.datastore.Datastore.allocateId(IncompleteKey key)"
  overload: "com.google.cloud.datastore.Datastore.allocateId*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Allocate a unique id for the given key. The returned key will have the same information\n (projectId, kind, namespace and ancestors) as the given key and will have a newly assigned id.\n\n <p>Example of allocating an id.\n\n <pre class=\"prettyprint lang-java\"><code>\n KeyFactory keyFactory = datastore.newKeyFactory().setKind(\"MyKind\");\n IncompleteKey incompleteKey = keyFactory.newKey();\n\n // let cloud datastore automatically assign an id\n Key key = datastore.allocateId(incompleteKey);\n </code></pre>"
  syntax:
    content: "public abstract Key allocateId(IncompleteKey key)"
    parameters:
    - id: "key"
      type: "com.google.cloud.datastore.IncompleteKey"
    return:
      type: "com.google.cloud.datastore.Key"
- uid: "com.google.cloud.datastore.Datastore.allocateId(com.google.cloud.datastore.IncompleteKey...)"
  id: "allocateId(com.google.cloud.datastore.IncompleteKey...)"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "allocateId(IncompleteKey[] keys)"
  nameWithType: "Datastore.allocateId(IncompleteKey[] keys)"
  fullName: "com.google.cloud.datastore.Datastore.allocateId(IncompleteKey[] keys)"
  overload: "com.google.cloud.datastore.Datastore.allocateId*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns a list of keys using the allocated ids ordered by the input.\n\n <p>Example of allocating multiple ids in a single batch.\n\n <pre class=\"prettyprint lang-java\"><code>\n KeyFactory keyFactory = datastore.newKeyFactory().setKind(\"MyKind\");\n IncompleteKey incompleteKey1 = keyFactory.newKey();\n IncompleteKey incompleteKey2 = keyFactory.newKey();\n\n // let cloud datastore automatically assign the ids\n List&lt;Key&gt; keys = datastore.allocateId(incompleteKey1, incompleteKey2);\n </code></pre>\nSee Also: <xref uid=\"com.google.cloud.datastore.Datastore.allocateId(com.google.cloud.datastore.IncompleteKey)\" data-throw-if-not-resolved=\"false\">#allocateId(IncompleteKey)</xref>\n"
  syntax:
    content: "public abstract List<Key> allocateId(IncompleteKey[] keys)"
    parameters:
    - id: "keys"
      type: "com.google.cloud.datastore.IncompleteKey[]"
    return:
      type: "java.util.List<com.google.cloud.datastore.Key>"
- uid: "com.google.cloud.datastore.Datastore.delete(com.google.cloud.datastore.Key...)"
  id: "delete(com.google.cloud.datastore.Key...)"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "delete(Key[] keys)"
  nameWithType: "Datastore.delete(Key[] keys)"
  fullName: "com.google.cloud.datastore.Datastore.delete(Key[] keys)"
  overload: "com.google.cloud.datastore.Datastore.delete*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "A datastore delete operation. It is OK to request the deletion of a non-existing key.\n\n <p>Example of deleting multiple entities.\n\n <pre class=\"prettyprint lang-java\"><code>\n String keyName1 = \"my_key_name1\";\n String keyName2 = \"my_key_name2\";\n Key key1 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName1);\n Key key2 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName2);\n datastore.delete(key1, key2);\n </code></pre>"
  syntax:
    content: "public abstract void delete(Key[] keys)"
    parameters:
    - id: "keys"
      type: "com.google.cloud.datastore.Key[]"
- uid: "com.google.cloud.datastore.Datastore.fetch(java.lang.Iterable<com.google.cloud.datastore.Key>,com.google.cloud.datastore.ReadOption...)"
  id: "fetch(java.lang.Iterable<com.google.cloud.datastore.Key>,com.google.cloud.datastore.ReadOption...)"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "fetch(Iterable<Key> keys, ReadOption[] options)"
  nameWithType: "Datastore.fetch(Iterable<Key> keys, ReadOption[] options)"
  fullName: "com.google.cloud.datastore.Datastore.fetch(Iterable<Key> keys, ReadOption[] options)"
  overload: "com.google.cloud.datastore.Datastore.fetch*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns a list with a value for each given key (ordered by input). <code>null</code> values are\n returned for nonexistent keys. When possible prefer using <xref uid=\"com.google.cloud.datastore.Datastore.get*\" data-throw-if-not-resolved=\"false\">#get(Key...)</xref> to avoid eagerly\n loading the results. <xref uid=\"com.google.cloud.datastore.ReadOption\" data-throw-if-not-resolved=\"false\">ReadOption</xref>s can be specified if desired.\n\n <p>Example of fetching a list of Entity objects.\n\n <pre class=\"prettyprint lang-java\"><code>\n String firstKeyName = \"my_first_key_name\";\n String secondKeyName = \"my_second_key_name\";\n KeyFactory keyFactory = datastore.newKeyFactory().setKind(\"MyKind\");\n Key firstKey = keyFactory.newKey(firstKeyName);\n Key secondKey = keyFactory.newKey(secondKeyName);\n List&lt;Entity&gt; entities = datastore.fetch(Lists.newArrayList(firstKey, secondKey));\n for (Entity entity : entities) {\n   // do something with the entity\n }\n </code></pre>"
  syntax:
    content: "public abstract List<Entity> fetch(Iterable<Key> keys, ReadOption[] options)"
    parameters:
    - id: "keys"
      type: "java.lang.Iterable<com.google.cloud.datastore.Key>"
    - id: "options"
      type: "com.google.cloud.datastore.ReadOption[]"
    return:
      type: "java.util.List<com.google.cloud.datastore.Entity>"
- uid: "com.google.cloud.datastore.Datastore.get(com.google.cloud.datastore.Key,com.google.cloud.datastore.ReadOption...)"
  id: "get(com.google.cloud.datastore.Key,com.google.cloud.datastore.ReadOption...)"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "get(Key key, ReadOption[] options)"
  nameWithType: "Datastore.get(Key key, ReadOption[] options)"
  fullName: "com.google.cloud.datastore.Datastore.get(Key key, ReadOption[] options)"
  overload: "com.google.cloud.datastore.Datastore.get*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns an <xref uid=\"com.google.cloud.datastore.Entity\" data-throw-if-not-resolved=\"false\">Entity</xref> for the given <xref uid=\"com.google.cloud.datastore.Key\" data-throw-if-not-resolved=\"false\">Key</xref> or <code>null</code> if it doesn't exist. <xref uid=\"com.google.cloud.datastore.ReadOption\" data-throw-if-not-resolved=\"false\">ReadOption</xref>s can be specified if desired.\n\n <p>Example of getting an entity.\n\n <pre class=\"prettyprint lang-java\"><code>\n String keyName = \"my_key_name\";\n Key key = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName);\n Entity entity = datastore.get(key);\n // Do something with the entity\n </code></pre>"
  syntax:
    content: "public abstract Entity get(Key key, ReadOption[] options)"
    parameters:
    - id: "key"
      type: "com.google.cloud.datastore.Key"
    - id: "options"
      type: "com.google.cloud.datastore.ReadOption[]"
    return:
      type: "com.google.cloud.datastore.Entity"
- uid: "com.google.cloud.datastore.Datastore.get(java.lang.Iterable<com.google.cloud.datastore.Key>,com.google.cloud.datastore.ReadOption...)"
  id: "get(java.lang.Iterable<com.google.cloud.datastore.Key>,com.google.cloud.datastore.ReadOption...)"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "get(Iterable<Key> keys, ReadOption[] options)"
  nameWithType: "Datastore.get(Iterable<Key> keys, ReadOption[] options)"
  fullName: "com.google.cloud.datastore.Datastore.get(Iterable<Key> keys, ReadOption[] options)"
  overload: "com.google.cloud.datastore.Datastore.get*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns an <xref uid=\"com.google.cloud.datastore.Entity\" data-throw-if-not-resolved=\"false\">Entity</xref> for each given <xref uid=\"com.google.cloud.datastore.Key\" data-throw-if-not-resolved=\"false\">Key</xref> that exists in the Datastore. The order of\n the result is unspecified. Results are loaded lazily, so it is possible to get a <code>\n DatastoreException</code> from the returned <code>Iterator</code>'s <xref uid=\"java.util.Iterator.hasNext\" data-throw-if-not-resolved=\"false\">hasNext</xref> or\n <xref uid=\"java.util.Iterator.next\" data-throw-if-not-resolved=\"false\">next</xref> methods. <xref uid=\"com.google.cloud.datastore.ReadOption\" data-throw-if-not-resolved=\"false\">ReadOption</xref>s can be specified if desired.\n\n <p>Example of getting multiple entity objects.\n\n <pre class=\"prettyprint lang-java\"><code>\n String firstKeyName = \"my_first_key_name\";\n String secondKeyName = \"my_second_key_name\";\n KeyFactory keyFactory = datastore.newKeyFactory().setKind(\"MyKind\");\n Key firstKey = keyFactory.newKey(firstKeyName);\n Key secondKey = keyFactory.newKey(secondKeyName);\n Iterator&lt;Entity&gt; entitiesIterator = datastore.get(Lists.newArrayList(firstKey, secondKey));\n List&lt;Entity&gt; entities = Lists.newArrayList();\n while (entitiesIterator.hasNext()) {\n   Entity entity = entitiesIterator.next();\n   // do something with the entity\n   entities.add(entity);\n }\n </code></pre>\nSee Also: <xref uid=\"com.google.cloud.datastore.Datastore.get*\" data-throw-if-not-resolved=\"false\">#get(Key)</xref>\n"
  syntax:
    content: "public abstract Iterator<Entity> get(Iterable<Key> keys, ReadOption[] options)"
    parameters:
    - id: "keys"
      type: "java.lang.Iterable<com.google.cloud.datastore.Key>"
    - id: "options"
      type: "com.google.cloud.datastore.ReadOption[]"
    return:
      type: "java.util.Iterator<com.google.cloud.datastore.Entity>"
- uid: "com.google.cloud.datastore.Datastore.newBatch()"
  id: "newBatch()"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "newBatch()"
  nameWithType: "Datastore.newBatch()"
  fullName: "com.google.cloud.datastore.Datastore.newBatch()"
  overload: "com.google.cloud.datastore.Datastore.newBatch*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns a new Batch for processing multiple write operations in one request.\n\n <p>Example of starting a new batch.\n\n <pre class=\"prettyprint lang-java\"><code>\n String keyName1 = \"my_key_name_1\";\n String keyName2 = \"my_key_name_2\";\n Key key1 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName1);\n Key key2 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName2);\n Batch batch = datastore.newBatch();\n Entity entity1 = Entity.newBuilder(key1).set(\"name\", \"John\").build();\n Entity entity2 = Entity.newBuilder(key2).set(\"title\", \"title\").build();\n batch.add(entity1);\n batch.add(entity2);\n batch.submit();\n </code></pre>"
  syntax:
    content: "public abstract Batch newBatch()"
    return:
      type: "com.google.cloud.datastore.Batch"
- uid: "com.google.cloud.datastore.Datastore.newKeyFactory()"
  id: "newKeyFactory()"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "newKeyFactory()"
  nameWithType: "Datastore.newKeyFactory()"
  fullName: "com.google.cloud.datastore.Datastore.newKeyFactory()"
  overload: "com.google.cloud.datastore.Datastore.newKeyFactory*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns a new KeyFactory for this service\n\n <p>Example of creating a <code>KeyFactory</code>.\n\n <pre class=\"prettyprint lang-java\"><code>\n KeyFactory keyFactory = datastore.newKeyFactory();\n </code></pre>"
  syntax:
    content: "public abstract KeyFactory newKeyFactory()"
    return:
      type: "com.google.cloud.datastore.KeyFactory"
- uid: "com.google.cloud.datastore.Datastore.newTransaction()"
  id: "newTransaction()"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "newTransaction()"
  nameWithType: "Datastore.newTransaction()"
  fullName: "com.google.cloud.datastore.Datastore.newTransaction()"
  overload: "com.google.cloud.datastore.Datastore.newTransaction*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns a new Datastore transaction."
  syntax:
    content: "public abstract Transaction newTransaction()"
    return:
      type: "com.google.cloud.datastore.Transaction"
- uid: "com.google.cloud.datastore.Datastore.newTransaction(com.google.datastore.v1.TransactionOptions)"
  id: "newTransaction(com.google.datastore.v1.TransactionOptions)"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "newTransaction(TransactionOptions options)"
  nameWithType: "Datastore.newTransaction(TransactionOptions options)"
  fullName: "com.google.cloud.datastore.Datastore.newTransaction(TransactionOptions options)"
  overload: "com.google.cloud.datastore.Datastore.newTransaction*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns a new Datastore transaction."
  syntax:
    content: "public abstract Transaction newTransaction(TransactionOptions options)"
    parameters:
    - id: "options"
      type: "com.google.datastore.v1.TransactionOptions"
      description: "a transaction option indicating the mode of the transaction (read-only or\n     read-write)"
    return:
      type: "com.google.cloud.datastore.Transaction"
- uid: "com.google.cloud.datastore.Datastore.put(com.google.cloud.datastore.FullEntity<?>)"
  id: "put(com.google.cloud.datastore.FullEntity<?>)"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "put(FullEntity<?> entity)"
  nameWithType: "Datastore.put(FullEntity<?> entity)"
  fullName: "com.google.cloud.datastore.Datastore.put(FullEntity<?> entity)"
  overload: "com.google.cloud.datastore.Datastore.put*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "A Datastore put (a.k.a upsert) operation: inserts an entity if it does not exist, updates it\n otherwise. This method will automatically allocate an id if necessary.\n\n <p>Example of putting a single entity.\n\n <pre class=\"prettyprint lang-java\"><code>\n String keyName = \"my_key_name\";\n Key key = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName);\n Entity.Builder entityBuilder = Entity.newBuilder(key);\n entityBuilder.set(\"propertyName\", \"value\");\n Entity entity = entityBuilder.build();\n datastore.put(entity);\n </code></pre>"
  syntax:
    content: "public abstract Entity put(FullEntity<?> entity)"
    parameters:
    - id: "entity"
      type: "com.google.cloud.datastore.FullEntity<?>"
    return:
      type: "com.google.cloud.datastore.Entity"
- uid: "com.google.cloud.datastore.Datastore.put(com.google.cloud.datastore.FullEntity<?>...)"
  id: "put(com.google.cloud.datastore.FullEntity<?>...)"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "put(FullEntity<?>[] entities)"
  nameWithType: "Datastore.put(FullEntity<?>[] entities)"
  fullName: "com.google.cloud.datastore.Datastore.put(FullEntity<?>[] entities)"
  overload: "com.google.cloud.datastore.Datastore.put*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "A Datastore put (a.k.a upsert) operation: creates an entity if it does not exist, updates it\n otherwise. This method will automatically allocate id for any entity with an incomplete key.\n\n <p>Example of putting multiple entities.\n\n <pre class=\"prettyprint lang-java\"><code>\n String keyName1 = \"my_key_name1\";\n String keyName2 = \"my_key_name2\";\n Key key1 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName1);\n Entity.Builder entityBuilder1 = Entity.newBuilder(key1);\n entityBuilder1.set(\"propertyName\", \"value1\");\n Entity entity1 = entityBuilder1.build();\n\n Key key2 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName2);\n Entity.Builder entityBuilder2 = Entity.newBuilder(key2);\n entityBuilder2.set(\"propertyName\", \"value2\");\n Entity entity2 = entityBuilder2.build();\n\n datastore.put(entity1, entity2);\n </code></pre>"
  syntax:
    content: "public abstract List<Entity> put(FullEntity<?>[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.FullEntity<?>[]"
    return:
      type: "java.util.List<com.google.cloud.datastore.Entity>"
- uid: "com.google.cloud.datastore.Datastore.reserveIds(com.google.cloud.datastore.Key...)"
  id: "reserveIds(com.google.cloud.datastore.Key...)"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "reserveIds(Key[] keys)"
  nameWithType: "Datastore.reserveIds(Key[] keys)"
  fullName: "com.google.cloud.datastore.Datastore.reserveIds(Key[] keys)"
  overload: "com.google.cloud.datastore.Datastore.reserveIds*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Reserve one or more keys, preventing them from being automatically allocated by Datastore.\n\n <p>Example of reserving multiple ids in a single batch.\n\n <pre class=\"prettyprint lang-java\"><code>\n KeyFactory keyFactory = datastore.newKeyFactory().setKind(\"MyKind\");\n Key key1 = keyFactory.newKey(10);\n Key key2 = keyFactory.newKey(\"name\");\n List&lt;Key&gt; keys = datastore.reserveIds(key1, key2);\n\n </code></pre>"
  syntax:
    content: "public abstract List<Key> reserveIds(Key[] keys)"
    parameters:
    - id: "keys"
      type: "com.google.cloud.datastore.Key[]"
    return:
      type: "java.util.List<com.google.cloud.datastore.Key>"
- uid: "com.google.cloud.datastore.Datastore.runAggregation(com.google.cloud.datastore.AggregationQuery,com.google.cloud.datastore.ReadOption...)"
  id: "runAggregation(com.google.cloud.datastore.AggregationQuery,com.google.cloud.datastore.ReadOption...)"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "runAggregation(AggregationQuery query, ReadOption[] options)"
  nameWithType: "Datastore.runAggregation(AggregationQuery query, ReadOption[] options)"
  fullName: "com.google.cloud.datastore.Datastore.runAggregation(AggregationQuery query, ReadOption[] options)"
  overload: "com.google.cloud.datastore.Datastore.runAggregation*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Submits a <xref uid=\"com.google.cloud.datastore.AggregationQuery\" data-throw-if-not-resolved=\"false\">AggregationQuery</xref> and returns <xref uid=\"com.google.cloud.datastore.AggregationResults\" data-throw-if-not-resolved=\"false\">AggregationResults</xref>. <xref uid=\"com.google.cloud.datastore.ReadOption\" data-throw-if-not-resolved=\"false\">ReadOption</xref>s\n can be specified if desired.\n\n <p>Example of running an <xref uid=\"com.google.cloud.datastore.AggregationQuery\" data-throw-if-not-resolved=\"false\">AggregationQuery</xref> to find the count of entities of one kind.\n\n <p><xref uid=\"com.google.cloud.datastore.StructuredQuery\" data-throw-if-not-resolved=\"false\">StructuredQuery</xref> example:\n\n <pre class=\"prettyprint lang-java\"><code>\n EntityQuery selectAllQuery = Query.newEntityQueryBuilder()\n    .setKind(\"Task\")\n    .build();\n AggregationQuery aggregationQuery = Query.newAggregationQueryBuilder()\n    .addAggregation(count().as(\"total_count\"))\n    .over(selectAllQuery)\n    .build();\n AggregationResults aggregationResults = datastore.runAggregation(aggregationQuery);\n for (AggregationResult aggregationResult : aggregationResults) {\n     System.out.println(aggregationResult.get(\"total_count\"));\n }\n </code></pre>\n\n <p><xref uid=\"com.google.datastore.v1.GqlQuery\" data-throw-if-not-resolved=\"false\">GqlQuery</xref> example:\n\n <pre class=\"prettyprint lang-java\"><code>\n GqlQuery<?> selectAllGqlQuery = Query.newGqlQueryBuilder(\n         \"AGGREGATE COUNT(*) AS total_count, COUNT_UP_TO(100) AS count_upto_100 OVER(SELECT * FROM Task)\"\n     )\n     .setAllowLiteral(true)\n     .build();\n AggregationQuery aggregationQuery = Query.newAggregationQueryBuilder()\n     .over(selectAllGqlQuery)\n     .build();\n AggregationResults aggregationResults = datastore.runAggregation(aggregationQuery);\n for (AggregationResult aggregationResult : aggregationResults) {\n   System.out.println(aggregationResult.get(\"total_count\"));\n   System.out.println(aggregationResult.get(\"count_upto_100\"));\n }\n </code></pre>"
  syntax:
    content: "public default AggregationResults runAggregation(AggregationQuery query, ReadOption[] options)"
    parameters:
    - id: "query"
      type: "com.google.cloud.datastore.AggregationQuery"
    - id: "options"
      type: "com.google.cloud.datastore.ReadOption[]"
    return:
      type: "com.google.cloud.datastore.AggregationResults"
      description: "<xref uid=\"com.google.cloud.datastore.AggregationResults\" data-throw-if-not-resolved=\"false\">AggregationResults</xref>"
- uid: "com.google.cloud.datastore.Datastore.update(com.google.cloud.datastore.Entity...)"
  id: "update(com.google.cloud.datastore.Entity...)"
  parent: "com.google.cloud.datastore.Datastore"
  langs:
  - "java"
  name: "update(Entity[] entities)"
  nameWithType: "Datastore.update(Entity[] entities)"
  fullName: "com.google.cloud.datastore.Datastore.update(Entity[] entities)"
  overload: "com.google.cloud.datastore.Datastore.update*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "A Datastore update operation. The operation will fail if an entity with the same key does not\n already exist.\n\n <p>Example of updating multiple entities.\n\n <pre class=\"prettyprint lang-java\"><code>\n String keyName1 = \"my_key_name_1\";\n String keyName2 = \"my_key_name_2\";\n Key key1 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName1);\n Entity.Builder entityBuilder1 = Entity.newBuilder(key1);\n entityBuilder1.set(\"propertyName\", \"updatedValue1\");\n Entity entity1 = entityBuilder1.build();\n\n Key key2 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName2);\n Entity.Builder entityBuilder2 = Entity.newBuilder(key2);\n entityBuilder2.set(\"propertyName\", \"updatedValue2\");\n Entity entity2 = entityBuilder2.build();\n\n datastore.update(entity1, entity2);\n </code></pre>"
  syntax:
    content: "public abstract void update(Entity[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.Entity[]"
references:
- uid: "com.google.datastore.v1.TransactionOptions"
  name: "TransactionOptions"
  nameWithType: "TransactionOptions"
  fullName: "com.google.datastore.v1.TransactionOptions"
- uid: "com.google.cloud.datastore.Transaction"
  name: "Transaction"
  nameWithType: "Transaction"
  fullName: "com.google.cloud.datastore.Transaction"
- uid: "com.google.cloud.datastore.Datastore.newTransaction*"
  name: "newTransaction"
  nameWithType: "Datastore.newTransaction"
  fullName: "com.google.cloud.datastore.Datastore.newTransaction"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Datastore.TransactionCallable<T>"
  spec.java:
  - uid: "com.google.cloud.datastore.Datastore.TransactionCallable"
    name: "TransactionCallable"
    fullName: "com.google.cloud.datastore.Datastore.TransactionCallable"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "T"
    name: "T"
    fullName: "T"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "T"
  spec.java:
  - uid: "T"
    name: "T"
    fullName: "T"
    isExternal: false
- uid: "com.google.cloud.datastore.Datastore.runInTransaction*"
  name: "<T>runInTransaction"
  nameWithType: "Datastore.<T>runInTransaction"
  fullName: "com.google.cloud.datastore.Datastore.<T>runInTransaction"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Batch"
  name: "Batch"
  nameWithType: "Batch"
  fullName: "com.google.cloud.datastore.Batch"
- uid: "com.google.cloud.datastore.Datastore.newBatch*"
  name: "newBatch"
  nameWithType: "Datastore.newBatch"
  fullName: "com.google.cloud.datastore.Datastore.newBatch"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.IncompleteKey"
  name: "IncompleteKey"
  nameWithType: "IncompleteKey"
  fullName: "com.google.cloud.datastore.IncompleteKey"
- uid: "com.google.cloud.datastore.Key"
  name: "Key"
  nameWithType: "Key"
  fullName: "com.google.cloud.datastore.Key"
- uid: "com.google.cloud.datastore.Datastore.allocateId*"
  name: "allocateId"
  nameWithType: "Datastore.allocateId"
  fullName: "com.google.cloud.datastore.Datastore.allocateId"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.IncompleteKey[]"
  spec.java:
  - uid: "com.google.cloud.datastore.IncompleteKey"
    name: "IncompleteKey"
    fullName: "com.google.cloud.datastore.IncompleteKey"
    isExternal: false
  - name: "[]"
    fullName: "[]"
    isExternal: false
- uid: "java.util.List<com.google.cloud.datastore.Key>"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/List<com/google/cloud/datastore/Key>.html"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "com.google.cloud.datastore.Key"
    name: "Key"
    fullName: "com.google.cloud.datastore.Key"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.Key[]"
  spec.java:
  - uid: "com.google.cloud.datastore.Key"
    name: "Key"
    fullName: "com.google.cloud.datastore.Key"
    isExternal: false
  - name: "[]"
    fullName: "[]"
    isExternal: false
- uid: "com.google.cloud.datastore.Datastore.reserveIds*"
  name: "reserveIds"
  nameWithType: "Datastore.reserveIds"
  fullName: "com.google.cloud.datastore.Datastore.reserveIds"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.FullEntity<?>"
  spec.java:
  - uid: "com.google.cloud.datastore.FullEntity"
    name: "FullEntity"
    fullName: "com.google.cloud.datastore.FullEntity"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "?"
    name: "?"
    fullName: "?"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.Entity"
  name: "Entity"
  nameWithType: "Entity"
  fullName: "com.google.cloud.datastore.Entity"
- uid: "com.google.cloud.datastore.Datastore.add*"
  name: "add"
  nameWithType: "Datastore.add"
  fullName: "com.google.cloud.datastore.Datastore.add"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.FullEntity<?>[]"
  spec.java:
  - uid: "com.google.cloud.datastore.FullEntity"
    name: "FullEntity"
    fullName: "com.google.cloud.datastore.FullEntity"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "?"
    name: "?"
    fullName: "?"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
  - name: "[]"
    fullName: "[]"
    isExternal: false
- uid: "java.util.List<com.google.cloud.datastore.Entity>"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/List<com/google/cloud/datastore/Entity>.html"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "com.google.cloud.datastore.Entity"
    name: "Entity"
    fullName: "com.google.cloud.datastore.Entity"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.Entity[]"
  spec.java:
  - uid: "com.google.cloud.datastore.Entity"
    name: "Entity"
    fullName: "com.google.cloud.datastore.Entity"
    isExternal: false
  - name: "[]"
    fullName: "[]"
    isExternal: false
- uid: "com.google.cloud.datastore.Datastore.update*"
  name: "update"
  nameWithType: "Datastore.update"
  fullName: "com.google.cloud.datastore.Datastore.update"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Datastore.put*"
  name: "put"
  nameWithType: "Datastore.put"
  fullName: "com.google.cloud.datastore.Datastore.put"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Datastore.delete*"
  name: "delete"
  nameWithType: "Datastore.delete"
  fullName: "com.google.cloud.datastore.Datastore.delete"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.KeyFactory"
  name: "KeyFactory"
  nameWithType: "KeyFactory"
  fullName: "com.google.cloud.datastore.KeyFactory"
- uid: "com.google.cloud.datastore.Datastore.newKeyFactory*"
  name: "newKeyFactory"
  nameWithType: "Datastore.newKeyFactory"
  fullName: "com.google.cloud.datastore.Datastore.newKeyFactory"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.ReadOption[]"
  spec.java:
  - uid: "com.google.cloud.datastore.ReadOption"
    name: "ReadOption"
    fullName: "com.google.cloud.datastore.ReadOption"
    isExternal: false
  - name: "[]"
    fullName: "[]"
    isExternal: false
- uid: "com.google.cloud.datastore.Datastore.get*"
  name: "get"
  nameWithType: "Datastore.get"
  fullName: "com.google.cloud.datastore.Datastore.get"
  package: "com.google.cloud.datastore"
- uid: "java.lang.Iterable<com.google.cloud.datastore.Key>"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable<com/google/cloud/datastore/Key>.html"
  spec.java:
  - uid: "java.lang.Iterable"
    name: "Iterable"
    fullName: "java.lang.Iterable"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html"
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "com.google.cloud.datastore.Key"
    name: "Key"
    fullName: "com.google.cloud.datastore.Key"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "java.util.Iterator<com.google.cloud.datastore.Entity>"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/Iterator<com/google/cloud/datastore/Entity>.html"
  spec.java:
  - uid: "java.util.Iterator"
    name: "Iterator"
    fullName: "java.util.Iterator"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html"
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "com.google.cloud.datastore.Entity"
    name: "Entity"
    fullName: "com.google.cloud.datastore.Entity"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.Datastore.fetch*"
  name: "fetch"
  nameWithType: "Datastore.fetch"
  fullName: "com.google.cloud.datastore.Datastore.fetch"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Query<T>"
  spec.java:
  - uid: "com.google.cloud.datastore.Query"
    name: "Query"
    fullName: "com.google.cloud.datastore.Query"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "T"
    name: "T"
    fullName: "T"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.QueryResults<T>"
  spec.java:
  - uid: "com.google.cloud.datastore.QueryResults"
    name: "QueryResults"
    fullName: "com.google.cloud.datastore.QueryResults"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "T"
    name: "T"
    fullName: "T"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.Datastore.run*"
  name: "<T>run"
  nameWithType: "Datastore.<T>run"
  fullName: "com.google.cloud.datastore.Datastore.<T>run"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.AggregationQuery"
  name: "AggregationQuery"
  nameWithType: "AggregationQuery"
  fullName: "com.google.cloud.datastore.AggregationQuery"
- uid: "com.google.cloud.datastore.AggregationResults"
  name: "AggregationResults"
  nameWithType: "AggregationResults"
  fullName: "com.google.cloud.datastore.AggregationResults"
- uid: "com.google.cloud.datastore.Datastore.runAggregation*"
  name: "runAggregation"
  nameWithType: "Datastore.runAggregation"
  fullName: "com.google.cloud.datastore.Datastore.runAggregation"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.Service<com.google.cloud.datastore.DatastoreOptions>"
  name: "Service<DatastoreOptions>"
  nameWithType: "Service<DatastoreOptions>"
  fullName: "com.google.cloud.Service<com.google.cloud.datastore.DatastoreOptions>"
- uid: "com.google.cloud.datastore.DatastoreReaderWriter"
  name: "DatastoreReaderWriter"
  nameWithType: "DatastoreReaderWriter"
  fullName: "com.google.cloud.datastore.DatastoreReaderWriter"
- uid: "com.google.cloud.datastore.Datastore.TransactionCallable"
  name: "Datastore.TransactionCallable<T>"
  nameWithType: "Datastore.TransactionCallable<T>"
  fullName: "com.google.cloud.datastore.Datastore.TransactionCallable<T>"
- uid: "java.util.List"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.google.cloud.datastore.FullEntity"
  name: "FullEntity"
  nameWithType: "FullEntity"
  fullName: "com.google.cloud.datastore.FullEntity"
- uid: "?"
  name: "?"
  nameWithType: "?"
  fullName: "?"
- uid: "?>[]"
  name: "?>[]"
  nameWithType: "?>[]"
  fullName: "?>[]"
- uid: "java.lang.Iterable"
  href: "https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html"
  name: "Iterable"
  nameWithType: "Iterable"
  fullName: "java.lang.Iterable"
- uid: "java.util.Iterator"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html"
  name: "Iterator"
  nameWithType: "Iterator"
  fullName: "java.util.Iterator"
- uid: "com.google.cloud.datastore.Query"
  name: "Query"
  nameWithType: "Query"
  fullName: "com.google.cloud.datastore.Query"
- uid: "com.google.cloud.datastore.QueryResults"
  name: "QueryResults"
  nameWithType: "QueryResults"
  fullName: "com.google.cloud.datastore.QueryResults"
- uid: "com.google.cloud.Service"
  name: "Service"
  nameWithType: "Service"
  fullName: "com.google.cloud.Service"
- uid: "com.google.cloud.datastore.DatastoreOptions"
  name: "DatastoreOptions"
  nameWithType: "DatastoreOptions"
  fullName: "com.google.cloud.datastore.DatastoreOptions"
