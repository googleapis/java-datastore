### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.datastore.Transaction"
  id: "Transaction"
  parent: "com.google.cloud.datastore"
  children:
  - "com.google.cloud.datastore.Transaction.<T>run(com.google.cloud.datastore.Query<T>)"
  - "com.google.cloud.datastore.Transaction.Response"
  - "com.google.cloud.datastore.Transaction.add(com.google.cloud.datastore.FullEntity<?>)"
  - "com.google.cloud.datastore.Transaction.add(com.google.cloud.datastore.FullEntity<?>...)"
  - "com.google.cloud.datastore.Transaction.addWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  - "com.google.cloud.datastore.Transaction.commit()"
  - "com.google.cloud.datastore.Transaction.delete(com.google.cloud.datastore.Key...)"
  - "com.google.cloud.datastore.Transaction.fetch(com.google.cloud.datastore.Key...)"
  - "com.google.cloud.datastore.Transaction.get(com.google.cloud.datastore.Key)"
  - "com.google.cloud.datastore.Transaction.get(com.google.cloud.datastore.Key...)"
  - "com.google.cloud.datastore.Transaction.getDatastore()"
  - "com.google.cloud.datastore.Transaction.getTransactionId()"
  - "com.google.cloud.datastore.Transaction.isActive()"
  - "com.google.cloud.datastore.Transaction.put(com.google.cloud.datastore.FullEntity<?>)"
  - "com.google.cloud.datastore.Transaction.put(com.google.cloud.datastore.FullEntity<?>...)"
  - "com.google.cloud.datastore.Transaction.putWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  - "com.google.cloud.datastore.Transaction.rollback()"
  - "com.google.cloud.datastore.Transaction.update(com.google.cloud.datastore.Entity...)"
  langs:
  - "java"
  name: "Transaction"
  nameWithType: "Transaction"
  fullName: "com.google.cloud.datastore.Transaction"
  type: "Interface"
  package: "com.google.cloud.datastore"
  summary: "A Google cloud datastore transaction. Similar to <xref uid=\"com.google.cloud.datastore.Batch\" data-throw-if-not-resolved=\"false\">Batch</xref> any write operation that is\n applied on a transaction will only be sent to the Datastore upon <xref uid=\"com.google.cloud.datastore.Transaction.commit*\" data-throw-if-not-resolved=\"false\">#commit</xref>. A call to\n <xref uid=\"com.google.cloud.datastore.Transaction.rollback*\" data-throw-if-not-resolved=\"false\">#rollback</xref> will invalidate the transaction and discard the changes. Any read operation\n that is done by a transaction will be part of it and therefore a <code>commit</code> is guaranteed to\n fail if an entity was modified outside the transaction after it was read. Write operation on this\n transaction will not be reflected by read operation (as the changes are only sent to the\n Datastore upon <code>commit</code>. A usage example:\n\n <pre class=\"prettyprint lang-java\"><code>\n Transaction transaction = datastore.newTransaction();\n try {\n   Entity entity = transaction.get(key);\n   if (!entity.contains(\"last_name\") || entity.isNull(\"last_name\")) {\n     String[] name = entity.getString(\"name\").split(\" \");\n     entity = Entity.newBuilder(entity)\n         .remove(\"name\")\n         .set(\"first_name\", name[0])\n         .set(\"last_name\", name[1])\n         .build();\n     transaction.update(entity);\n     transaction.commit();\n   }\n } finally {\n   if (transaction.isActive()) {\n     transaction.rollback();\n   }\n }\n </code></pre>\nSee Also: <a href=\"https://cloud.google.com/datastore/docs/concepts/transactions\">Google Cloud  Datastore transactions</a>  <p><b> WARNING: This class maintains an internal state in terms of <xref uid=\"java.util.LinkedHashMap\" data-throw-if-not-resolved=\"false\">java.util.LinkedHashMap</xref> and <xref uid=\"java.util.LinkedHashSet\" data-throw-if-not-resolved=\"false\">java.util.LinkedHashSet</xref> which gets updated on every  method call performing CRUD operations to record the mutations. Since <xref uid=\"java.util.LinkedHashMap\" data-throw-if-not-resolved=\"false\">java.util.LinkedHashMap</xref> is not thread safe as per its <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html\">documentation</a>,  This class too should not be treated as a thread safe class. </b>\n"
  syntax:
    content: "public interface Transaction extends DatastoreBatchWriter, DatastoreReaderWriter"
  implements:
  - "com.google.cloud.datastore.DatastoreBatchWriter"
  - "com.google.cloud.datastore.DatastoreReaderWriter"
- uid: "com.google.cloud.datastore.Transaction.<T>run(com.google.cloud.datastore.Query<T>)"
  id: "<T>run(com.google.cloud.datastore.Query<T>)"
  parent: "com.google.cloud.datastore.Transaction"
  langs:
  - "java"
  name: "<T>run(Query<T> query)"
  nameWithType: "Transaction.<T>run(Query<T> query)"
  fullName: "com.google.cloud.datastore.Transaction.<T>run(Query<T> query)"
  overload: "com.google.cloud.datastore.Transaction.run*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Submits a <xref uid=\"com.google.cloud.datastore.Query\" data-throw-if-not-resolved=\"false\">Query</xref> and returns its result. The entities returned by the result of this query will be part of this Datastore\n transaction (so a commit is guaranteed to fail if any of the entities was changed by others\n after the query was performed) but any write changes in this transaction will not be reflected\n by the result.\n\n <p>Example of running a query to find all entities with an ancestor.\n\n <pre class=\"prettyprint lang-java\"><code>\n String parentKeyName = \"my_parent_key_name\";\n KeyFactory keyFactory = datastore.newKeyFactory().setKind(\"ParentKind\");\n Key parentKey = keyFactory.newKey(parentKeyName);\n // Build a query\n Query&lt;Entity&gt; query = Query.newEntityQueryBuilder()\n     .setKind(\"MyKind\")\n     .setFilter(PropertyFilter.hasAncestor(parentKey))\n     .build();\n QueryResults&lt;Entity&gt; results = transaction.run(query);\n List&lt;Entity&gt; entities = Lists.newArrayList();\n while (results.hasNext()) {\n   Entity result = results.next();\n   // do something with result\n   entities.add(result);\n }\n transaction.commit();\n </code></pre>"
  syntax:
    content: "public abstract QueryResults<T> <T>run(Query<T> query)"
    parameters:
    - id: "query"
      type: "com.google.cloud.datastore.Query<T>"
    return:
      type: "com.google.cloud.datastore.QueryResults<T>"
- uid: "com.google.cloud.datastore.Transaction.add(com.google.cloud.datastore.FullEntity<?>)"
  id: "add(com.google.cloud.datastore.FullEntity<?>)"
  parent: "com.google.cloud.datastore.Transaction"
  langs:
  - "java"
  name: "add(FullEntity<?> entity)"
  nameWithType: "Transaction.add(FullEntity<?> entity)"
  fullName: "com.google.cloud.datastore.Transaction.add(FullEntity<?> entity)"
  overload: "com.google.cloud.datastore.Transaction.add*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Datastore add operation: inserts the provided entity. This method will automatically allocate\n an id if necessary. If <code>entity</code> has a complete key and was already marked for deletion in this\n writer, the operation will be changed to <xref uid=\"com.google.cloud.datastore.Transaction.put*\" data-throw-if-not-resolved=\"false\">#put</xref>.\n\n <p>Example of adding a single entity.\n\n <pre class=\"prettyprint lang-java\"><code>\n String keyName = \"my_key_name\";\n Key key = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName);\n Entity.Builder entityBuilder = Entity.newBuilder(key);\n entityBuilder.set(\"propertyName\", \"value\");\n Entity entity = entityBuilder.build();\n transaction.add(entity);\n transaction.commit();\n </code></pre>"
  syntax:
    content: "public abstract Entity add(FullEntity<?> entity)"
    parameters:
    - id: "entity"
      type: "com.google.cloud.datastore.FullEntity<?>"
    return:
      type: "com.google.cloud.datastore.Entity"
- uid: "com.google.cloud.datastore.Transaction.add(com.google.cloud.datastore.FullEntity<?>...)"
  id: "add(com.google.cloud.datastore.FullEntity<?>...)"
  parent: "com.google.cloud.datastore.Transaction"
  langs:
  - "java"
  name: "add(FullEntity<?>[] entities)"
  nameWithType: "Transaction.add(FullEntity<?>[] entities)"
  fullName: "com.google.cloud.datastore.Transaction.add(FullEntity<?>[] entities)"
  overload: "com.google.cloud.datastore.Transaction.add*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Datastore add operation: inserts the provided entities. This method will automatically allocate\n id for any entity with an incomplete key. For entities with complete keys that were marked for deletion in this writer the\n operation will be changed to <xref uid=\"com.google.cloud.datastore.Transaction.put*\" data-throw-if-not-resolved=\"false\">#put</xref>.\n\n <p>Example of adding multiple entities.\n\n <pre class=\"prettyprint lang-java\"><code>\n String keyName1 = \"my_key_name1\";\n String keyName2 = \"my_key_name2\";\n Key key1 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName1);\n Entity.Builder entityBuilder1 = Entity.newBuilder(key1);\n entityBuilder1.set(\"propertyName\", \"value1\");\n Entity entity1 = entityBuilder1.build();\n\n Key key2 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName2);\n Entity.Builder entityBuilder2 = Entity.newBuilder(key2);\n entityBuilder2.set(\"propertyName\", \"value2\");\n Entity entity2 = entityBuilder2.build();\n\n transaction.add(entity1, entity2);\n transaction.commit();\n </code></pre>"
  syntax:
    content: "public abstract List<Entity> add(FullEntity<?>[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.FullEntity<?>[]"
    return:
      type: "java.util.List<com.google.cloud.datastore.Entity>"
- uid: "com.google.cloud.datastore.Transaction.addWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  id: "addWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  parent: "com.google.cloud.datastore.Transaction"
  langs:
  - "java"
  name: "addWithDeferredIdAllocation(FullEntity<?>[] entities)"
  nameWithType: "Transaction.addWithDeferredIdAllocation(FullEntity<?>[] entities)"
  fullName: "com.google.cloud.datastore.Transaction.addWithDeferredIdAllocation(FullEntity<?>[] entities)"
  overload: "com.google.cloud.datastore.Transaction.addWithDeferredIdAllocation*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Datastore add operation. This method will also allocate id for any entity with an incomplete\n key. As opposed to <xref uid=\"com.google.cloud.datastore.Transaction.add(com.google.cloud.datastore.FullEntity<?>)\" data-throw-if-not-resolved=\"false\">#add(FullEntity)</xref> and <xref uid=\"com.google.cloud.datastore.Transaction.add*\" data-throw-if-not-resolved=\"false\">#add(FullEntity...)</xref>, this method will\n defer any necessary id allocation to commit time.\n\n <p>Example of adding multiple entities with deferred id allocation.\n\n <pre class=\"prettyprint lang-java\"><code>\n IncompleteKey key1 = datastore.newKeyFactory().setKind(\"MyKind\").newKey();\n FullEntity.Builder entityBuilder1 = FullEntity.newBuilder(key1);\n entityBuilder1.set(\"propertyName\", \"value1\");\n FullEntity entity1 = entityBuilder1.build();\n\n IncompleteKey key2 = datastore.newKeyFactory().setKind(\"MyKind\").newKey();\n FullEntity.Builder entityBuilder2 = FullEntity.newBuilder(key2);\n entityBuilder2.set(\"propertyName\", \"value2\");\n FullEntity entity2 = entityBuilder2.build();\n\n transaction.addWithDeferredIdAllocation(entity1, entity2);\n Response response = transaction.commit();\n </code></pre>"
  syntax:
    content: "public abstract void addWithDeferredIdAllocation(FullEntity<?>[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.FullEntity<?>[]"
- uid: "com.google.cloud.datastore.Transaction.commit()"
  id: "commit()"
  parent: "com.google.cloud.datastore.Transaction"
  langs:
  - "java"
  name: "commit()"
  nameWithType: "Transaction.commit()"
  fullName: "com.google.cloud.datastore.Transaction.commit()"
  overload: "com.google.cloud.datastore.Transaction.commit*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Commit the transaction.\n\n <p>Example of committing a transaction.\n\n <pre class=\"prettyprint lang-java\"><code>\n // create an entity\n KeyFactory keyFactory = datastore.newKeyFactory().setKind(\"MyKind\");\n Key key = datastore.allocateId(keyFactory.newKey());\n Entity entity = Entity.newBuilder(key).set(\"description\", \"commit()\").build();\n\n // add the entity and commit\n try {\n   transaction.put(entity);\n   transaction.commit();\n } catch (DatastoreException ex) {\n   // handle exception\n }\n </code></pre>"
  syntax:
    content: "public abstract Transaction.Response commit()"
    return:
      type: "com.google.cloud.datastore.Transaction.Response"
- uid: "com.google.cloud.datastore.Transaction.delete(com.google.cloud.datastore.Key...)"
  id: "delete(com.google.cloud.datastore.Key...)"
  parent: "com.google.cloud.datastore.Transaction"
  langs:
  - "java"
  name: "delete(Key[] keys)"
  nameWithType: "Transaction.delete(Key[] keys)"
  fullName: "com.google.cloud.datastore.Transaction.delete(Key[] keys)"
  overload: "com.google.cloud.datastore.Transaction.delete*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "A datastore delete operation. It is OK to request the deletion of a non-existing key. This operation will also remove from this batch any prior writes for entities\n with the same keys. This operation will also remove from this transaction any prior writes for\n entities with the same keys.\n\n <p>Example of deleting multiple entities.\n\n <pre class=\"prettyprint lang-java\"><code>\n String keyName1 = \"my_key_name1\";\n String keyName2 = \"my_key_name2\";\n Key key1 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName1);\n Key key2 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName2);\n transaction.delete(key1, key2);\n transaction.commit();\n </code></pre>"
  syntax:
    content: "public abstract void delete(Key[] keys)"
    parameters:
    - id: "keys"
      type: "com.google.cloud.datastore.Key[]"
- uid: "com.google.cloud.datastore.Transaction.fetch(com.google.cloud.datastore.Key...)"
  id: "fetch(com.google.cloud.datastore.Key...)"
  parent: "com.google.cloud.datastore.Transaction"
  langs:
  - "java"
  name: "fetch(Key[] keys)"
  nameWithType: "Transaction.fetch(Key[] keys)"
  fullName: "com.google.cloud.datastore.Transaction.fetch(Key[] keys)"
  overload: "com.google.cloud.datastore.Transaction.fetch*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns a list with a value for each given key (ordered by input). <code>null</code> values are\n returned for nonexistent keys. When possible prefer using <xref uid=\"com.google.cloud.datastore.Transaction.get*\" data-throw-if-not-resolved=\"false\">#get(Key...)</xref> to avoid eagerly\n loading the results. The requested entities will be part of this Datastore transaction (so a commit is\n guaranteed to fail if any of the entities was changed by others after they were seen by this\n transaction) but any write changes in this transaction will not be reflected by the returned\n entities.\n\n <p>Example of fetching a list of entities for several keys.\n\n <pre class=\"prettyprint lang-java\"><code>\n String firstKeyName = \"my_first_key_name\";\n String secondKeyName = \"my_second_key_name\";\n KeyFactory keyFactory = datastore.newKeyFactory().setKind(\"MyKind\");\n Key firstKey = keyFactory.newKey(firstKeyName);\n Key secondKey = keyFactory.newKey(secondKeyName);\n List&lt;Entity&gt; entities = transaction.fetch(firstKey, secondKey);\n for (Entity entity : entities) {\n   // do something with the entity\n }\n transaction.commit();\n </code></pre>"
  syntax:
    content: "public abstract List<Entity> fetch(Key[] keys)"
    parameters:
    - id: "keys"
      type: "com.google.cloud.datastore.Key[]"
    return:
      type: "java.util.List<com.google.cloud.datastore.Entity>"
- uid: "com.google.cloud.datastore.Transaction.get(com.google.cloud.datastore.Key)"
  id: "get(com.google.cloud.datastore.Key)"
  parent: "com.google.cloud.datastore.Transaction"
  langs:
  - "java"
  name: "get(Key key)"
  nameWithType: "Transaction.get(Key key)"
  fullName: "com.google.cloud.datastore.Transaction.get(Key key)"
  overload: "com.google.cloud.datastore.Transaction.get*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns an <xref uid=\"com.google.cloud.datastore.Entity\" data-throw-if-not-resolved=\"false\">Entity</xref> for the given <xref uid=\"com.google.cloud.datastore.Key\" data-throw-if-not-resolved=\"false\">Key</xref> or <code>null</code> if it doesn't exist. The requested entity will be part of this Datastore transaction (so a commit is\n guaranteed to fail if entity was changed by others after it was seen by this transaction) but\n any write changes in this transaction will not be reflected by the returned entity.\n\n <p>Example of getting an entity for a given key.\n\n <pre class=\"prettyprint lang-java\"><code>\n String keyName = \"my_key_name\";\n Key key = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName);\n Entity entity = transaction.get(key);\n transaction.commit();\n // Do something with the entity\n </code></pre>"
  syntax:
    content: "public abstract Entity get(Key key)"
    parameters:
    - id: "key"
      type: "com.google.cloud.datastore.Key"
    return:
      type: "com.google.cloud.datastore.Entity"
- uid: "com.google.cloud.datastore.Transaction.get(com.google.cloud.datastore.Key...)"
  id: "get(com.google.cloud.datastore.Key...)"
  parent: "com.google.cloud.datastore.Transaction"
  langs:
  - "java"
  name: "get(Key[] key)"
  nameWithType: "Transaction.get(Key[] key)"
  fullName: "com.google.cloud.datastore.Transaction.get(Key[] key)"
  overload: "com.google.cloud.datastore.Transaction.get*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns an <xref uid=\"com.google.cloud.datastore.Entity\" data-throw-if-not-resolved=\"false\">Entity</xref> for each given <xref uid=\"com.google.cloud.datastore.Key\" data-throw-if-not-resolved=\"false\">Key</xref> that exists in the Datastore. The order of\n the result is unspecified. Results are loaded lazily, so it is possible to get a <code>\n DatastoreException</code> from the returned <code>Iterator</code>'s <xref uid=\"java.util.Iterator.hasNext\" data-throw-if-not-resolved=\"false\">hasNext</xref> or\n <xref uid=\"java.util.Iterator.next\" data-throw-if-not-resolved=\"false\">next</xref> methods. The requested entities will be part of this Datastore transaction (so a commit is\n guaranteed to fail if any of the entities was changed by others after they were seen by this\n transaction) but any write changes in this transaction will not be reflected by the returned\n entities.\n\n <p>Example of getting entities for several keys.\n\n <pre class=\"prettyprint lang-java\"><code>\n String firstKeyName = \"my_first_key_name\";\n String secondKeyName = \"my_second_key_name\";\n KeyFactory keyFactory = datastore.newKeyFactory().setKind(\"MyKind\");\n Key firstKey = keyFactory.newKey(firstKeyName);\n Key secondKey = keyFactory.newKey(secondKeyName);\n Iterator&lt;Entity&gt; entitiesIterator = transaction.get(firstKey, secondKey);\n List&lt;Entity&gt; entities = Lists.newArrayList();\n while (entitiesIterator.hasNext()) {\n   Entity entity = entitiesIterator.next();\n   // do something with the entity\n   entities.add(entity);\n }\n transaction.commit();\n </code></pre>"
  syntax:
    content: "public abstract Iterator<Entity> get(Key[] key)"
    parameters:
    - id: "key"
      type: "com.google.cloud.datastore.Key[]"
    return:
      type: "java.util.Iterator<com.google.cloud.datastore.Entity>"
- uid: "com.google.cloud.datastore.Transaction.getDatastore()"
  id: "getDatastore()"
  parent: "com.google.cloud.datastore.Transaction"
  langs:
  - "java"
  name: "getDatastore()"
  nameWithType: "Transaction.getDatastore()"
  fullName: "com.google.cloud.datastore.Transaction.getDatastore()"
  overload: "com.google.cloud.datastore.Transaction.getDatastore*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns the transaction associated <xref uid=\"com.google.cloud.datastore.Datastore\" data-throw-if-not-resolved=\"false\">Datastore</xref>."
  syntax:
    content: "public abstract Datastore getDatastore()"
    return:
      type: "com.google.cloud.datastore.Datastore"
- uid: "com.google.cloud.datastore.Transaction.getTransactionId()"
  id: "getTransactionId()"
  parent: "com.google.cloud.datastore.Transaction"
  langs:
  - "java"
  name: "getTransactionId()"
  nameWithType: "Transaction.getTransactionId()"
  fullName: "com.google.cloud.datastore.Transaction.getTransactionId()"
  overload: "com.google.cloud.datastore.Transaction.getTransactionId*"
  type: "Method"
  package: "com.google.cloud.datastore"
  syntax:
    content: "public abstract ByteString getTransactionId()"
    return:
      type: "com.google.protobuf.ByteString"
- uid: "com.google.cloud.datastore.Transaction.isActive()"
  id: "isActive()"
  parent: "com.google.cloud.datastore.Transaction"
  langs:
  - "java"
  name: "isActive()"
  nameWithType: "Transaction.isActive()"
  fullName: "com.google.cloud.datastore.Transaction.isActive()"
  overload: "com.google.cloud.datastore.Transaction.isActive*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns <code>true</code> if the transaction is still active (was not committed or rolledback).\n\n <p>Example of verifying if a transaction is active.\n\n <pre class=\"prettyprint lang-java\"><code>\n // create an entity\n KeyFactory keyFactory = datastore.newKeyFactory().setKind(\"MyKind\");\n Key key = datastore.allocateId(keyFactory.newKey());\n Entity entity = Entity.newBuilder(key).set(\"description\", \"active()\").build();\n // calling transaction.active() now would return true\n try {\n   // add the entity and commit\n   transaction.put(entity);\n   transaction.commit();\n } finally {\n   // if committing succeeded\n   // then transaction.active() will be false\n   if (transaction.isActive()) {\n     // otherwise it's true and we need to rollback\n     transaction.rollback();\n   }\n }\n </code></pre>"
  syntax:
    content: "public abstract boolean isActive()"
    return:
      type: "boolean"
- uid: "com.google.cloud.datastore.Transaction.put(com.google.cloud.datastore.FullEntity<?>)"
  id: "put(com.google.cloud.datastore.FullEntity<?>)"
  parent: "com.google.cloud.datastore.Transaction"
  langs:
  - "java"
  name: "put(FullEntity<?> entity)"
  nameWithType: "Transaction.put(FullEntity<?> entity)"
  fullName: "com.google.cloud.datastore.Transaction.put(FullEntity<?> entity)"
  overload: "com.google.cloud.datastore.Transaction.put*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "A Datastore put (a.k.a upsert) operation: inserts an entity if it does not exist, updates it\n otherwise. This method will automatically allocate an id if necessary. This operation will also remove from this writer any prior writes for the same\n entity. This operation will also remove from this transaction any prior writes for the\n same entity.\n\n <p>Example of putting a single entity.\n\n <pre class=\"prettyprint lang-java\"><code>\n String keyName = \"my_key_name\";\n Key key = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName);\n Entity.Builder entityBuilder = Entity.newBuilder(key);\n entityBuilder.set(\"propertyName\", \"value\");\n Entity entity = entityBuilder.build();\n transaction.put(entity);\n transaction.commit();\n </code></pre>"
  syntax:
    content: "public abstract Entity put(FullEntity<?> entity)"
    parameters:
    - id: "entity"
      type: "com.google.cloud.datastore.FullEntity<?>"
    return:
      type: "com.google.cloud.datastore.Entity"
- uid: "com.google.cloud.datastore.Transaction.put(com.google.cloud.datastore.FullEntity<?>...)"
  id: "put(com.google.cloud.datastore.FullEntity<?>...)"
  parent: "com.google.cloud.datastore.Transaction"
  langs:
  - "java"
  name: "put(FullEntity<?>[] entities)"
  nameWithType: "Transaction.put(FullEntity<?>[] entities)"
  fullName: "com.google.cloud.datastore.Transaction.put(FullEntity<?>[] entities)"
  overload: "com.google.cloud.datastore.Transaction.put*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "A Datastore put (a.k.a upsert) operation: creates an entity if it does not exist, updates it\n otherwise. This method will automatically allocate id for any entity with an incomplete key. This operation will also remove from this writer any prior writes for the same\n entities. This operation will also remove from this transaction any prior writes for the\n same entities.\n\n <p>Example of putting multiple entities.\n\n <pre class=\"prettyprint lang-java\"><code>\n String keyName1 = \"my_key_name1\";\n String keyName2 = \"my_key_name2\";\n Key key1 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName1);\n Entity.Builder entityBuilder1 = Entity.newBuilder(key1);\n entityBuilder1.set(\"propertyName\", \"value1\");\n Entity entity1 = entityBuilder1.build();\n\n Key key2 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName2);\n Entity.Builder entityBuilder2 = Entity.newBuilder(key2);\n entityBuilder2.set(\"propertyName\", \"value2\");\n Entity entity2 = entityBuilder2.build();\n\n transaction.put(entity1, entity2);\n transaction.commit();\n </code></pre>"
  syntax:
    content: "public abstract List<Entity> put(FullEntity<?>[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.FullEntity<?>[]"
    return:
      type: "java.util.List<com.google.cloud.datastore.Entity>"
- uid: "com.google.cloud.datastore.Transaction.putWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  id: "putWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  parent: "com.google.cloud.datastore.Transaction"
  langs:
  - "java"
  name: "putWithDeferredIdAllocation(FullEntity<?>[] entities)"
  nameWithType: "Transaction.putWithDeferredIdAllocation(FullEntity<?>[] entities)"
  fullName: "com.google.cloud.datastore.Transaction.putWithDeferredIdAllocation(FullEntity<?>[] entities)"
  overload: "com.google.cloud.datastore.Transaction.putWithDeferredIdAllocation*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Datastore put operation. This method will also allocate id for any entity with an incomplete\n key. As opposed to <xref uid=\"com.google.cloud.datastore.Transaction.put(com.google.cloud.datastore.FullEntity<?>)\" data-throw-if-not-resolved=\"false\">#put(FullEntity)</xref> and <xref uid=\"com.google.cloud.datastore.Transaction.put*\" data-throw-if-not-resolved=\"false\">#put(FullEntity...)</xref>, this method will\n defer any necessary id allocation to commit time.\n\n <p>Example of putting multiple entities with deferred id allocation.\n\n <pre class=\"prettyprint lang-java\"><code>\n IncompleteKey key1 = datastore.newKeyFactory().setKind(\"MyKind\").newKey();\n FullEntity.Builder entityBuilder1 = FullEntity.newBuilder(key1);\n entityBuilder1.set(\"propertyName\", \"value1\");\n FullEntity entity1 = entityBuilder1.build();\n\n IncompleteKey key2 = datastore.newKeyFactory().setKind(\"MyKind\").newKey();\n FullEntity.Builder entityBuilder2 = FullEntity.newBuilder(key2);\n entityBuilder2.set(\"propertyName\", \"value2\");\n FullEntity entity2 = entityBuilder2.build();\n\n transaction.putWithDeferredIdAllocation(entity1, entity2);\n Response response = transaction.commit();\n </code></pre>"
  syntax:
    content: "public abstract void putWithDeferredIdAllocation(FullEntity<?>[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.FullEntity<?>[]"
- uid: "com.google.cloud.datastore.Transaction.rollback()"
  id: "rollback()"
  parent: "com.google.cloud.datastore.Transaction"
  langs:
  - "java"
  name: "rollback()"
  nameWithType: "Transaction.rollback()"
  fullName: "com.google.cloud.datastore.Transaction.rollback()"
  overload: "com.google.cloud.datastore.Transaction.rollback*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Rollback the transaction.\n\n <p>Example of rolling back a transaction.\n\n <pre class=\"prettyprint lang-java\"><code>\n // create an entity\n KeyFactory keyFactory = datastore.newKeyFactory().setKind(\"MyKind\");\n Key key = datastore.allocateId(keyFactory.newKey());\n Entity entity = Entity.newBuilder(key).set(\"description\", \"rollback()\").build();\n\n // add the entity and rollback\n transaction.put(entity);\n transaction.rollback();\n // calling transaction.commit() now would fail\n </code></pre>"
  syntax:
    content: "public abstract void rollback()"
- uid: "com.google.cloud.datastore.Transaction.update(com.google.cloud.datastore.Entity...)"
  id: "update(com.google.cloud.datastore.Entity...)"
  parent: "com.google.cloud.datastore.Transaction"
  langs:
  - "java"
  name: "update(Entity[] entities)"
  nameWithType: "Transaction.update(Entity[] entities)"
  fullName: "com.google.cloud.datastore.Transaction.update(Entity[] entities)"
  overload: "com.google.cloud.datastore.Transaction.update*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "A Datastore update operation. The operation will fail if an entity with the same key does not\n already exist. This operation will be converted to <xref uid=\"com.google.cloud.datastore.Transaction.put*\" data-throw-if-not-resolved=\"false\">#put</xref> operation for entities that were\n already added or put in this writer. This operation will be converted to <xref uid=\"com.google.cloud.datastore.Transaction.put*\" data-throw-if-not-resolved=\"false\">#put</xref> operation for entities that were\n already added or put in this writer.\n\n <p>Example of updating multiple entities.\n\n <pre class=\"prettyprint lang-java\"><code>\n String keyName1 = \"my_key_name1\";\n String keyName2 = \"my_key_name2\";\n Key key1 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName1);\n Entity.Builder entityBuilder1 = Entity.newBuilder(key1);\n entityBuilder1.set(\"propertyName\", \"value3\");\n Entity entity1 = entityBuilder1.build();\n\n Key key2 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName2);\n Entity.Builder entityBuilder2 = Entity.newBuilder(key2);\n entityBuilder2.set(\"propertyName\", \"value4\");\n Entity entity2 = entityBuilder2.build();\n\n transaction.update(entity1, entity2);\n transaction.commit();\n </code></pre>"
  syntax:
    content: "public abstract void update(Entity[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.Entity[]"
references:
- uid: "com.google.cloud.datastore.Key"
  name: "Key"
  nameWithType: "Key"
  fullName: "com.google.cloud.datastore.Key"
- uid: "com.google.cloud.datastore.Entity"
  name: "Entity"
  nameWithType: "Entity"
  fullName: "com.google.cloud.datastore.Entity"
- uid: "com.google.cloud.datastore.Transaction.get*"
  name: "get"
  nameWithType: "Transaction.get"
  fullName: "com.google.cloud.datastore.Transaction.get"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Key[]"
  spec.java:
  - uid: "com.google.cloud.datastore.Key"
    name: "Key"
    fullName: "com.google.cloud.datastore.Key"
    isExternal: false
  - name: "[]"
    fullName: "[]"
    isExternal: false
- uid: "java.util.Iterator<com.google.cloud.datastore.Entity>"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/Iterator<com/google/cloud/datastore/Entity>.html"
  spec.java:
  - uid: "java.util.Iterator"
    name: "Iterator"
    fullName: "java.util.Iterator"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html"
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "com.google.cloud.datastore.Entity"
    name: "Entity"
    fullName: "com.google.cloud.datastore.Entity"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "java.util.List<com.google.cloud.datastore.Entity>"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/List<com/google/cloud/datastore/Entity>.html"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "com.google.cloud.datastore.Entity"
    name: "Entity"
    fullName: "com.google.cloud.datastore.Entity"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.Transaction.fetch*"
  name: "fetch"
  nameWithType: "Transaction.fetch"
  fullName: "com.google.cloud.datastore.Transaction.fetch"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Query<T>"
  spec.java:
  - uid: "com.google.cloud.datastore.Query"
    name: "Query"
    fullName: "com.google.cloud.datastore.Query"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "T"
    name: "T"
    fullName: "T"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.QueryResults<T>"
  spec.java:
  - uid: "com.google.cloud.datastore.QueryResults"
    name: "QueryResults"
    fullName: "com.google.cloud.datastore.QueryResults"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "T"
    name: "T"
    fullName: "T"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.Transaction.run*"
  name: "<T>run"
  nameWithType: "Transaction.<T>run"
  fullName: "com.google.cloud.datastore.Transaction.<T>run"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.FullEntity<?>[]"
  spec.java:
  - uid: "com.google.cloud.datastore.FullEntity"
    name: "FullEntity"
    fullName: "com.google.cloud.datastore.FullEntity"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "?"
    name: "?"
    fullName: "?"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
  - name: "[]"
    fullName: "[]"
    isExternal: false
- uid: "com.google.cloud.datastore.Transaction.addWithDeferredIdAllocation*"
  name: "addWithDeferredIdAllocation"
  nameWithType: "Transaction.addWithDeferredIdAllocation"
  fullName: "com.google.cloud.datastore.Transaction.addWithDeferredIdAllocation"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.FullEntity<?>"
  spec.java:
  - uid: "com.google.cloud.datastore.FullEntity"
    name: "FullEntity"
    fullName: "com.google.cloud.datastore.FullEntity"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "?"
    name: "?"
    fullName: "?"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.Transaction.add*"
  name: "add"
  nameWithType: "Transaction.add"
  fullName: "com.google.cloud.datastore.Transaction.add"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Entity[]"
  spec.java:
  - uid: "com.google.cloud.datastore.Entity"
    name: "Entity"
    fullName: "com.google.cloud.datastore.Entity"
    isExternal: false
  - name: "[]"
    fullName: "[]"
    isExternal: false
- uid: "com.google.cloud.datastore.Transaction.update*"
  name: "update"
  nameWithType: "Transaction.update"
  fullName: "com.google.cloud.datastore.Transaction.update"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Transaction.delete*"
  name: "delete"
  nameWithType: "Transaction.delete"
  fullName: "com.google.cloud.datastore.Transaction.delete"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Transaction.putWithDeferredIdAllocation*"
  name: "putWithDeferredIdAllocation"
  nameWithType: "Transaction.putWithDeferredIdAllocation"
  fullName: "com.google.cloud.datastore.Transaction.putWithDeferredIdAllocation"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Transaction.put*"
  name: "put"
  nameWithType: "Transaction.put"
  fullName: "com.google.cloud.datastore.Transaction.put"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Transaction.Response"
  name: "Transaction.Response"
  nameWithType: "Transaction.Response"
  fullName: "com.google.cloud.datastore.Transaction.Response"
- uid: "com.google.cloud.datastore.Transaction.commit*"
  name: "commit"
  nameWithType: "Transaction.commit"
  fullName: "com.google.cloud.datastore.Transaction.commit"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Transaction.rollback*"
  name: "rollback"
  nameWithType: "Transaction.rollback"
  fullName: "com.google.cloud.datastore.Transaction.rollback"
  package: "com.google.cloud.datastore"
- uid: "boolean"
  href: "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
    isExternal: false
- uid: "com.google.cloud.datastore.Transaction.isActive*"
  name: "isActive"
  nameWithType: "Transaction.isActive"
  fullName: "com.google.cloud.datastore.Transaction.isActive"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Datastore"
  name: "Datastore"
  nameWithType: "Datastore"
  fullName: "com.google.cloud.datastore.Datastore"
- uid: "com.google.cloud.datastore.Transaction.getDatastore*"
  name: "getDatastore"
  nameWithType: "Transaction.getDatastore"
  fullName: "com.google.cloud.datastore.Transaction.getDatastore"
  package: "com.google.cloud.datastore"
- uid: "com.google.protobuf.ByteString"
  isExternal: true
  spec.java:
  - uid: "com.google.protobuf.ByteString"
    name: "ByteString"
    fullName: "com.google.protobuf.ByteString"
    isExternal: true
- uid: "com.google.cloud.datastore.Transaction.getTransactionId*"
  name: "getTransactionId"
  nameWithType: "Transaction.getTransactionId"
  fullName: "com.google.cloud.datastore.Transaction.getTransactionId"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.DatastoreBatchWriter"
  name: "DatastoreBatchWriter"
  nameWithType: "DatastoreBatchWriter"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter"
- uid: "com.google.cloud.datastore.DatastoreReaderWriter"
  name: "DatastoreReaderWriter"
  nameWithType: "DatastoreReaderWriter"
  fullName: "com.google.cloud.datastore.DatastoreReaderWriter"
- uid: "java.util.Iterator"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html"
  name: "Iterator"
  nameWithType: "Iterator"
  fullName: "java.util.Iterator"
- uid: "java.util.List"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.google.cloud.datastore.Query"
  name: "Query"
  nameWithType: "Query"
  fullName: "com.google.cloud.datastore.Query"
- uid: "T"
  name: "T"
  nameWithType: "T"
  fullName: "T"
- uid: "com.google.cloud.datastore.QueryResults"
  name: "QueryResults"
  nameWithType: "QueryResults"
  fullName: "com.google.cloud.datastore.QueryResults"
- uid: "com.google.cloud.datastore.FullEntity"
  name: "FullEntity"
  nameWithType: "FullEntity"
  fullName: "com.google.cloud.datastore.FullEntity"
- uid: "?>[]"
  name: "?>[]"
  nameWithType: "?>[]"
  fullName: "?>[]"
- uid: "?"
  name: "?"
  nameWithType: "?"
  fullName: "?"
