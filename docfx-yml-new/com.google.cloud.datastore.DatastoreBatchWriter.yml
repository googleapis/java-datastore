### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.datastore.DatastoreBatchWriter"
  id: "DatastoreBatchWriter"
  parent: "com.google.cloud.datastore"
  children:
  - "com.google.cloud.datastore.DatastoreBatchWriter.add(com.google.cloud.datastore.FullEntity<?>)"
  - "com.google.cloud.datastore.DatastoreBatchWriter.add(com.google.cloud.datastore.FullEntity<?>...)"
  - "com.google.cloud.datastore.DatastoreBatchWriter.addWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  - "com.google.cloud.datastore.DatastoreBatchWriter.delete(com.google.cloud.datastore.Key...)"
  - "com.google.cloud.datastore.DatastoreBatchWriter.isActive()"
  - "com.google.cloud.datastore.DatastoreBatchWriter.put(com.google.cloud.datastore.FullEntity<?>)"
  - "com.google.cloud.datastore.DatastoreBatchWriter.put(com.google.cloud.datastore.FullEntity<?>...)"
  - "com.google.cloud.datastore.DatastoreBatchWriter.putWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  - "com.google.cloud.datastore.DatastoreBatchWriter.update(com.google.cloud.datastore.Entity...)"
  langs:
  - "java"
  name: "DatastoreBatchWriter"
  nameWithType: "DatastoreBatchWriter"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter"
  type: "Interface"
  package: "com.google.cloud.datastore"
  summary: "An interface to represent a batch of write operations. All write operation for a batch writer\n will be applied to the Datastore in one RPC call.\n\n <p><b> WARNING: This class maintains an internal state in terms of <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.LinkedHashMap</xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.LinkedHashSet</xref> which gets updated on every method\n call performing CRUD operations to record the mutations. Since <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.LinkedHashMap</xref> is\n not thread safe as per its <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html\">documentation</a>,\n This class too should not be treated as a thread safe class. </b>"
  syntax:
    content: "public interface DatastoreBatchWriter extends DatastoreWriter"
  implements:
  - "com.google.cloud.datastore.DatastoreWriter"
- uid: "com.google.cloud.datastore.DatastoreBatchWriter.add(com.google.cloud.datastore.FullEntity<?>)"
  id: "add(com.google.cloud.datastore.FullEntity<?>)"
  parent: "com.google.cloud.datastore.DatastoreBatchWriter"
  langs:
  - "java"
  name: "add(FullEntity<?> entity)"
  nameWithType: "DatastoreBatchWriter.add(FullEntity<?> entity)"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter.add(FullEntity<?> entity)"
  overload: "com.google.cloud.datastore.DatastoreBatchWriter.add*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Datastore add operation: inserts the provided entity. This method will automatically allocate\n an id if necessary. If <code>entity</code> has a complete key and was already marked for deletion in this\n writer, the operation will be changed to <xref uid=\"com.google.cloud.datastore.DatastoreBatchWriter.put*\" data-throw-if-not-resolved=\"false\">#put</xref>."
  syntax:
    content: "public abstract Entity add(FullEntity<?> entity)"
    parameters:
    - id: "entity"
      type: "com.google.cloud.datastore.FullEntity<?>"
    return:
      type: "com.google.cloud.datastore.Entity"
- uid: "com.google.cloud.datastore.DatastoreBatchWriter.add(com.google.cloud.datastore.FullEntity<?>...)"
  id: "add(com.google.cloud.datastore.FullEntity<?>...)"
  parent: "com.google.cloud.datastore.DatastoreBatchWriter"
  langs:
  - "java"
  name: "add(FullEntity<?>[] entities)"
  nameWithType: "DatastoreBatchWriter.add(FullEntity<?>[] entities)"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter.add(FullEntity<?>[] entities)"
  overload: "com.google.cloud.datastore.DatastoreBatchWriter.add*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Datastore add operation: inserts the provided entities. This method will automatically allocate\n id for any entity with an incomplete key. For entities with complete keys that were marked for deletion in this writer the\n operation will be changed to <xref uid=\"com.google.cloud.datastore.DatastoreBatchWriter.put*\" data-throw-if-not-resolved=\"false\">#put</xref>."
  syntax:
    content: "public abstract List<Entity> add(FullEntity<?>[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.FullEntity<?>[]"
    return:
      type: "java.util.List<com.google.cloud.datastore.Entity>"
- uid: "com.google.cloud.datastore.DatastoreBatchWriter.addWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  id: "addWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  parent: "com.google.cloud.datastore.DatastoreBatchWriter"
  langs:
  - "java"
  name: "addWithDeferredIdAllocation(FullEntity<?>[] entities)"
  nameWithType: "DatastoreBatchWriter.addWithDeferredIdAllocation(FullEntity<?>[] entities)"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter.addWithDeferredIdAllocation(FullEntity<?>[] entities)"
  overload: "com.google.cloud.datastore.DatastoreBatchWriter.addWithDeferredIdAllocation*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Datastore add operation. This method will also allocate id for any entity with an incomplete\n key. As opposed to <xref uid=\"com.google.cloud.datastore.DatastoreBatchWriter.add(com.google.cloud.datastore.FullEntity<?>)\" data-throw-if-not-resolved=\"false\">#add(FullEntity)</xref> and <xref uid=\"com.google.cloud.datastore.DatastoreBatchWriter.add*\" data-throw-if-not-resolved=\"false\">#add(FullEntity...)</xref>, this method will\n defer any necessary id allocation to submit time."
  syntax:
    content: "public abstract void addWithDeferredIdAllocation(FullEntity<?>[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.FullEntity<?>[]"
- uid: "com.google.cloud.datastore.DatastoreBatchWriter.delete(com.google.cloud.datastore.Key...)"
  id: "delete(com.google.cloud.datastore.Key...)"
  parent: "com.google.cloud.datastore.DatastoreBatchWriter"
  langs:
  - "java"
  name: "delete(Key[] keys)"
  nameWithType: "DatastoreBatchWriter.delete(Key[] keys)"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter.delete(Key[] keys)"
  overload: "com.google.cloud.datastore.DatastoreBatchWriter.delete*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "A datastore delete operation. It is OK to request the deletion of a non-existing key. This operation will also remove from this batch any prior writes for entities\n with the same keys."
  syntax:
    content: "public abstract void delete(Key[] keys)"
    parameters:
    - id: "keys"
      type: "com.google.cloud.datastore.Key[]"
- uid: "com.google.cloud.datastore.DatastoreBatchWriter.isActive()"
  id: "isActive()"
  parent: "com.google.cloud.datastore.DatastoreBatchWriter"
  langs:
  - "java"
  name: "isActive()"
  nameWithType: "DatastoreBatchWriter.isActive()"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter.isActive()"
  overload: "com.google.cloud.datastore.DatastoreBatchWriter.isActive*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Returns <code>true</code> if still active (write operations were not sent to the Datastore)."
  syntax:
    content: "public abstract boolean isActive()"
    return:
      type: "boolean"
- uid: "com.google.cloud.datastore.DatastoreBatchWriter.put(com.google.cloud.datastore.FullEntity<?>)"
  id: "put(com.google.cloud.datastore.FullEntity<?>)"
  parent: "com.google.cloud.datastore.DatastoreBatchWriter"
  langs:
  - "java"
  name: "put(FullEntity<?> entity)"
  nameWithType: "DatastoreBatchWriter.put(FullEntity<?> entity)"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter.put(FullEntity<?> entity)"
  overload: "com.google.cloud.datastore.DatastoreBatchWriter.put*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "A Datastore put (a.k.a upsert) operation: inserts an entity if it does not exist, updates it\n otherwise. This method will automatically allocate an id if necessary. This operation will also remove from this writer any prior writes for the same\n entity."
  syntax:
    content: "public abstract Entity put(FullEntity<?> entity)"
    parameters:
    - id: "entity"
      type: "com.google.cloud.datastore.FullEntity<?>"
    return:
      type: "com.google.cloud.datastore.Entity"
- uid: "com.google.cloud.datastore.DatastoreBatchWriter.put(com.google.cloud.datastore.FullEntity<?>...)"
  id: "put(com.google.cloud.datastore.FullEntity<?>...)"
  parent: "com.google.cloud.datastore.DatastoreBatchWriter"
  langs:
  - "java"
  name: "put(FullEntity<?>[] entities)"
  nameWithType: "DatastoreBatchWriter.put(FullEntity<?>[] entities)"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter.put(FullEntity<?>[] entities)"
  overload: "com.google.cloud.datastore.DatastoreBatchWriter.put*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "A Datastore put (a.k.a upsert) operation: creates an entity if it does not exist, updates it\n otherwise. This method will automatically allocate id for any entity with an incomplete key. This operation will also remove from this writer any prior writes for the same\n entities."
  syntax:
    content: "public abstract List<Entity> put(FullEntity<?>[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.FullEntity<?>[]"
    return:
      type: "java.util.List<com.google.cloud.datastore.Entity>"
- uid: "com.google.cloud.datastore.DatastoreBatchWriter.putWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  id: "putWithDeferredIdAllocation(com.google.cloud.datastore.FullEntity<?>...)"
  parent: "com.google.cloud.datastore.DatastoreBatchWriter"
  langs:
  - "java"
  name: "putWithDeferredIdAllocation(FullEntity<?>[] entities)"
  nameWithType: "DatastoreBatchWriter.putWithDeferredIdAllocation(FullEntity<?>[] entities)"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter.putWithDeferredIdAllocation(FullEntity<?>[] entities)"
  overload: "com.google.cloud.datastore.DatastoreBatchWriter.putWithDeferredIdAllocation*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "Datastore put operation. This method will also allocate id for any entity with an incomplete\n key. As opposed to <xref uid=\"com.google.cloud.datastore.DatastoreBatchWriter.put(com.google.cloud.datastore.FullEntity<?>)\" data-throw-if-not-resolved=\"false\">#put(FullEntity)</xref> and <xref uid=\"com.google.cloud.datastore.DatastoreBatchWriter.put*\" data-throw-if-not-resolved=\"false\">#put(FullEntity...)</xref>, this method will\n defer any necessary id allocation to submit time."
  syntax:
    content: "public abstract void putWithDeferredIdAllocation(FullEntity<?>[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.FullEntity<?>[]"
- uid: "com.google.cloud.datastore.DatastoreBatchWriter.update(com.google.cloud.datastore.Entity...)"
  id: "update(com.google.cloud.datastore.Entity...)"
  parent: "com.google.cloud.datastore.DatastoreBatchWriter"
  langs:
  - "java"
  name: "update(Entity[] entities)"
  nameWithType: "DatastoreBatchWriter.update(Entity[] entities)"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter.update(Entity[] entities)"
  overload: "com.google.cloud.datastore.DatastoreBatchWriter.update*"
  type: "Method"
  package: "com.google.cloud.datastore"
  summary: "A Datastore update operation. The operation will fail if an entity with the same key does not\n already exist. This operation will be converted to <xref uid=\"com.google.cloud.datastore.DatastoreBatchWriter.put*\" data-throw-if-not-resolved=\"false\">#put</xref> operation for entities that were\n already added or put in this writer."
  syntax:
    content: "public abstract void update(Entity[] entities)"
    parameters:
    - id: "entities"
      type: "com.google.cloud.datastore.Entity[]"
references:
- uid: "com.google.cloud.datastore.FullEntity<?>[]"
  spec.java:
  - uid: "com.google.cloud.datastore.FullEntity"
    name: "FullEntity"
    fullName: "com.google.cloud.datastore.FullEntity"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "?"
    name: "?"
    fullName: "?"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
  - name: "[]"
    fullName: "[]"
    isExternal: false
- uid: "com.google.cloud.datastore.DatastoreBatchWriter.addWithDeferredIdAllocation*"
  name: "addWithDeferredIdAllocation"
  nameWithType: "DatastoreBatchWriter.addWithDeferredIdAllocation"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter.addWithDeferredIdAllocation"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.FullEntity<?>"
  spec.java:
  - uid: "com.google.cloud.datastore.FullEntity"
    name: "FullEntity"
    fullName: "com.google.cloud.datastore.FullEntity"
    isExternal: false
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "?"
    name: "?"
    fullName: "?"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.Entity"
  name: "Entity"
  nameWithType: "Entity"
  fullName: "com.google.cloud.datastore.Entity"
- uid: "com.google.cloud.datastore.DatastoreBatchWriter.add*"
  name: "add"
  nameWithType: "DatastoreBatchWriter.add"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter.add"
  package: "com.google.cloud.datastore"
- uid: "java.util.List<com.google.cloud.datastore.Entity>"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/List<com/google/cloud/datastore/Entity>.html"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
    isExternal: false
    href: "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
  - name: "<"
    fullName: "<"
    isExternal: false
  - uid: "com.google.cloud.datastore.Entity"
    name: "Entity"
    fullName: "com.google.cloud.datastore.Entity"
    isExternal: false
  - name: ">"
    fullName: ">"
    isExternal: false
- uid: "com.google.cloud.datastore.Entity[]"
  spec.java:
  - uid: "com.google.cloud.datastore.Entity"
    name: "Entity"
    fullName: "com.google.cloud.datastore.Entity"
    isExternal: false
  - name: "[]"
    fullName: "[]"
    isExternal: false
- uid: "com.google.cloud.datastore.DatastoreBatchWriter.update*"
  name: "update"
  nameWithType: "DatastoreBatchWriter.update"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter.update"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.Key[]"
  spec.java:
  - uid: "com.google.cloud.datastore.Key"
    name: "Key"
    fullName: "com.google.cloud.datastore.Key"
    isExternal: false
  - name: "[]"
    fullName: "[]"
    isExternal: false
- uid: "com.google.cloud.datastore.DatastoreBatchWriter.delete*"
  name: "delete"
  nameWithType: "DatastoreBatchWriter.delete"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter.delete"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.DatastoreBatchWriter.putWithDeferredIdAllocation*"
  name: "putWithDeferredIdAllocation"
  nameWithType: "DatastoreBatchWriter.putWithDeferredIdAllocation"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter.putWithDeferredIdAllocation"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.DatastoreBatchWriter.put*"
  name: "put"
  nameWithType: "DatastoreBatchWriter.put"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter.put"
  package: "com.google.cloud.datastore"
- uid: "boolean"
  href: "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
    isExternal: false
- uid: "com.google.cloud.datastore.DatastoreBatchWriter.isActive*"
  name: "isActive"
  nameWithType: "DatastoreBatchWriter.isActive"
  fullName: "com.google.cloud.datastore.DatastoreBatchWriter.isActive"
  package: "com.google.cloud.datastore"
- uid: "com.google.cloud.datastore.DatastoreWriter"
  name: "DatastoreWriter"
  nameWithType: "DatastoreWriter"
  fullName: "com.google.cloud.datastore.DatastoreWriter"
- uid: "com.google.cloud.datastore.FullEntity"
  name: "FullEntity"
  nameWithType: "FullEntity"
  fullName: "com.google.cloud.datastore.FullEntity"
- uid: "?>[]"
  name: "?>[]"
  nameWithType: "?>[]"
  fullName: "?>[]"
- uid: "?"
  name: "?"
  nameWithType: "?"
  fullName: "?"
- uid: "java.util.List"
  href: "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
